(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{"./src/__docs__/etc.mdx":function(e,t,a){"use strict";a.r(t),a.d(t,"default",function(){return l});var i=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),n=(a("./node_modules/react/index.js"),a("./node_modules/@mdx-js/react/dist/index.es.js")),b={},c="wrapper";function l(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(n.b)(c,Object.assign({},b,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"other-topical-notes"},"Other topical notes"),Object(n.b)("h2",{id:"building--commands"},"Building & Commands"),Object(n.b)("p",null,"You'll notice the ",Object(n.b)("inlineCode",{parentName:"p"},"package.json")," scripts are very simple.\nThat's because the build instructions were getting complex, so they were moved into a ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/dfee/rbx/blob/master/Makefile"}),Object(n.b)("inlineCode",{parentName:"a"},"Makefile")),"."),Object(n.b)("p",null,"By running the ",Object(n.b)("inlineCode",{parentName:"p"},"make help")," command in the root of a cloned repo, you'll see the available options (including building, testing, etc.)"),Object(n.b)("h3",{id:"testing"},"Testing"),Object(n.b)("p",null,"The robust way to test is with ",Object(n.b)("inlineCode",{parentName:"p"},"make test"),", which will:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"run ",Object(n.b)("inlineCode",{parentName:"li"},"tslint")," to verify the code"),Object(n.b)("li",{parentName:"ol"},"run ",Object(n.b)("inlineCode",{parentName:"li"},"jest")," for unit and snapshot testing"),Object(n.b)("li",{parentName:"ol"},"output a coverage report")),Object(n.b)("p",null,"For convenience, you'll often want to use ",Object(n.b)("inlineCode",{parentName:"p"},"npx jest the/file/to/test.ts")," to run tests on a particular file."),Object(n.b)("h3",{id:"building"},"Building"),Object(n.b)("p",null,"The general way to build is to use ",Object(n.b)("inlineCode",{parentName:"p"},"make"),", which will:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"compile the code into ",Object(n.b)("em",{parentName:"li"},"ECMAScript 6")," with ",Object(n.b)("inlineCode",{parentName:"li"},"tsc")," into the '/dist' directory"),Object(n.b)("li",{parentName:"ol"},"compile that ",Object(n.b)("em",{parentName:"li"},"ES6")," code into ",Object(n.b)("em",{parentName:"li"},"UMD")," (",Object(n.b)("em",{parentName:"li"},"Universal Module Definition"),") code using ",Object(n.b)("inlineCode",{parentName:"li"},"rollup")," (as ",Object(n.b)("inlineCode",{parentName:"li"},"rbx.umd.js")," extension)."),Object(n.b)("li",{parentName:"ol"},"copy and compile the ",Object(n.b)("em",{parentName:"li"},"SASS")," code into ",Object(n.b)("em",{parentName:"li"},"CSS"),", output to the ",Object(n.b)("inlineCode",{parentName:"li"},"/dist")," directory"),Object(n.b)("li",{parentName:"ol"},"copy and modify the ",Object(n.b)("inlineCode",{parentName:"li"},"package.json")," so that it can be published to ",Object(n.b)("em",{parentName:"li"},"npm")," without requiring imports from a root directory (i.e. ",Object(n.b)("inlineCode",{parentName:"li"},"import { DEFAULTS } from 'rbx/base/helpers/variables';")," rather than ",Object(n.b)("inlineCode",{parentName:"li"},"import { DEFAULTS } from 'rbx/dist/base/helpers/variables"),").")),Object(n.b)("h3",{id:"publish"},"Publish"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Important:")," do not use ",Object(n.b)("inlineCode",{parentName:"p"},"npm publish")," to publish the code to ",Object(n.b)("em",{parentName:"p"},"npm"),".\nRather, use ",Object(n.b)("inlineCode",{parentName:"p"},"make publish")," which will publish the build result in ",Object(n.b)("inlineCode",{parentName:"p"},"/dist"),"."),Object(n.b)("h2",{id:"contributing-and-releasing"},"Contributing and releasing"),Object(n.b)("h3",{id:"authoring-a-pull-request-contributing"},"Authoring a Pull Request (contributing)"),Object(n.b)("p",null,"To participate in development, here is the contribution process:"),Object(n.b)("ul",null,Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","fork ",Object(n.b)("inlineCode",{parentName:"li"},"rbx")," on GitHub"),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"git clone")," (create the repo locally)"),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"git checkout master")),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"git pull")," (updating ",Object(n.b)("inlineCode",{parentName:"li"},"master"),")"),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"git checkout -b <new-branch>")," (create ",Object(n.b)("em",{parentName:"li"},"feature")," or ",Object(n.b)("em",{parentName:"li"},"bug")," branch)"),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","implement code changes"),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","update documentation as appropriate (using ",Object(n.b)("inlineCode",{parentName:"li"},"make docs-dev"),")"),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"make test")," (for linting, unit tests, etc.)"),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"make examples-test")," (for ensuring that the demos still work)"),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"make")," (generating updated ",Object(n.b)("inlineCode",{parentName:"li"},"size-snapshot.json"),")"),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"git add")," and ",Object(n.b)("inlineCode",{parentName:"li"},"git commit")),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"git push origin <new-branch>")),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","ensure CI coverage passes"),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","open pull request to master repo (",Object(n.b)("inlineCode",{parentName:"li"},"dfee/rbx"),")")),Object(n.b)("h3",{id:"after-the-pull-request-releasing"},"After the Pull Request (releasing)"),Object(n.b)("p",null,"After an acceptable pull request is received, here is the release process:"),Object(n.b)("ul",null,Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"git checkout master")),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"git pull")),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"git merge <new-branch>")),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"npm version")," (update package version)."),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"git push")," and ",Object(n.b)("inlineCode",{parentName:"li"},"git push origin <version-tag>")),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","ensure CI coverage passes (again)"),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"make")," and ",Object(n.b)("inlineCode",{parentName:"li"},"make publish")," (create a new release with updated version, and publish to NPM)"),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"make docs")," and ",Object(n.b)("inlineCode",{parentName:"li"},"make docs-publish")," (optional, build and publish docs to GitHub Pages)"),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",'create release on GitHub (find tag -> "Create release")'),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"git branch -d <new-branch>")," (delete ",Object(n.b)("inlineCode",{parentName:"li"},"<new-branch>")," locally)"),Object(n.b)("li",Object.assign({parentName:"ul"},{className:"task-list-item"}),Object(n.b)("input",Object.assign({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(n.b)("inlineCode",{parentName:"li"},"git push --delete origin <new-branch>")," (delete ",Object(n.b)("inlineCode",{parentName:"li"},"<new-branch>")," on remote)")))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/__docs__/etc.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=src-docs-etc.fc493be904ddd6f2633b.js.map