{"version":3,"sources":["/Users/dfee/code/rbx/src/__docs__/customize.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dfee_code_rbx_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","isMDXComponent"],"mappings":"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","file":"static/js/src-docs-customize.fbc815d1.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"customize-rbx\"\n    }}>{`Customize rbx`}</h1>\n    <p>{`Sometimes the default `}<a parentName=\"p\" {...{\n        \"href\": \"https://bulma.io\"\n      }}>{`Bulma`}</a>{` styles aren't enough.\nThat's a feature and not a bug, and the Bulma docs are quick to demonstrate `}<a parentName=\"p\" {...{\n        \"href\": \"https://bulma.io/documentation/customize/\"\n      }}>{`how to customize the SASS`}</a>{` to your liking.`}</p>\n    <h2 {...{\n      \"id\": \"modifying-sass-variables\"\n    }}>{`Modifying SASS variables`}</h2>\n    <p>{`If you're modifying SASS values without introducing anything new, you don't have to keep reading. If you are `}<strong parentName=\"p\">{`adding`}</strong>{` or `}<strong parentName=\"p\">{`removing`}</strong>{` variables (or `}<strong parentName=\"p\">{`adding`}</strong>{` to or `}<strong parentName=\"p\">{`removing`}</strong>{` from SASS arrays), the following docs `}<em parentName=\"p\">{`are`}</em>{` relevant.`}</p>\n    <p>{`There are many places in `}<strong parentName=\"p\">{`rbx`}</strong>{` that leverage these variable overrides: the global modifier helpers (located at `}<inlineCode parentName=\"p\">{`/base/helpers`}</inlineCode>{`) as well as components like `}<inlineCode parentName=\"p\">{`<Button>`}</inlineCode>{` (and more than 20 others).`}</p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Before we get on to an example, here's an overview of how we use `}<em parentName=\"p\">{`TypeScript`}</em>{` to customize what props are supported.`}</p>\n    <p>{`Take a look at the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dfee/rbx/blob/master/src/base/helpers/variables.ts\"\n      }}>{`source code for the `}<strong parentName=\"a\">{`helpers variables`}</strong></a>{`, or the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dfee/rbx/blob/master/src/elements/button/button.tsx\"\n      }}>{`source code for `}<inlineCode parentName=\"a\">{`<Button>`}</inlineCode></a>{`, and you'll notice two very important expressions:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`the `}<inlineCode parentName=\"li\">{`DEFAULTS`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`<COMPONENT>_DEFAULTS`}</inlineCode>{` variable that defines the defaults in a `}<inlineCode parentName=\"li\">{`const`}</inlineCode></li>\n      <li parentName=\"ol\">{`a `}<inlineCode parentName=\"li\">{`Variables`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`<Component>Variables`}</inlineCode>{` `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{` that uses those defaults to construct a `}<em parentName=\"li\">{`TypeScript`}</em>{` type.`}</li>\n    </ol>\n    <p>{`Looking deeper at the `}<strong parentName=\"p\">{`DEFAULTS`}</strong>{`, that's where the `}<em parentName=\"p\">{`Bulma`}</em>{` defaults are defined in code.\nFor example, `}<inlineCode parentName=\"p\">{`colors`}</inlineCode>{` on `}<inlineCode parentName=\"p\">{`DEFAULTS`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`sizes`}</inlineCode>{` on `}<inlineCode parentName=\"p\">{`BUTTON_DEFAULTS`}</inlineCode>{`.`}</p>\n    <p>{`Looking deeper at the `}<strong parentName=\"p\">{`Variables`}</strong>{`, you'll realize that `}<inlineCode parentName=\"p\">{`Variables`}</inlineCode>{` is actually just a merge of `}<inlineCode parentName=\"p\">{`VariablesDefaults`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`VariablesOverrides`}</inlineCode>{`.`}</p>\n    <p>{`Below we'll talk more about how to override these.`}</p>\n    <h2 {...{\n      \"id\": \"an-example-introducing-a-new-color\"\n    }}>{`An example: introducing a new color`}</h2>\n    <p>{`To add the color `}<inlineCode parentName=\"p\">{`\"react\"`}</inlineCode>{` (the React logo-color) so that all components can use it (across props like `}<inlineCode parentName=\"p\">{`textColor`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`backgroundColor`}</inlineCode>{` as well as with component-specific props like `}<inlineCode parentName=\"p\">{`color`}</inlineCode>{` on `}<inlineCode parentName=\"p\">{`<Button>`}</inlineCode>{`), you'll need to extend the `}<inlineCode parentName=\"p\">{`$colors`}</inlineCode>{` variable before import Bulma's SASS.`}</p>\n    <p>{`Your new SASS file (imported somewhere in your App) will look something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# App.sass\n\n@charset 'utf-8';\n\n@import \"~bulma/sass/utilities/functions\"\n\n// add new colors\n$react: #00d8ff !default\n$react-invert: findColorInvert($react) !default\n$custom-colors: (\"react\": ($react, $react-invert))\n\n// Import Bulma styles\n@import \"~bulma/bulma\"\n\n// Import rbx style fixes (**very simple**)\n@import \"~rbx/rbx\"\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"update-the-theme\"\n    }}>{`Update the `}<inlineCode parentName=\"h3\">{`<Theme>`}</inlineCode></h3>\n    <p>{`If you've altered a `}<a parentName=\"p\" {...{\n        \"href\": \"https://bulma.io/documentation/modifiers/\"\n      }}>{`Bulma modifier`}</a>{`, you'll need to update the `}<inlineCode parentName=\"p\">{`<Theme>`}</inlineCode>{` at the root of your App, so that `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/prop-types\"\n      }}>{`PropTypes`}</a>{` uses the proper values for prop type-checking.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.npmjs.com/package/prop-types\"\n        }}><em parentName=\"a\">{`PropTypes`}</em></a>{` only provides literal type-checks on the global helpers – those located in `}<inlineCode parentName=\"p\">{`base/helpers`}</inlineCode>{`. I.e. `}<em parentName=\"p\">{`PropTypes`}</em>{` will check that your new `}<inlineCode parentName=\"p\">{`\"react\"`}</inlineCode>{` color is in fact a `}<inlineCode parentName=\"p\">{`textColor`}</inlineCode>{`, but it will `}<em parentName=\"p\">{`not`}</em>{` check that `}<inlineCode parentName=\"p\">{`\"react\"`}</inlineCode>{` is a valid `}<inlineCode parentName=\"p\">{`color`}</inlineCode>{` for `}<inlineCode parentName=\"p\">{`<Button>`}</inlineCode>{`, due to limitations on `}<inlineCode parentName=\"p\">{`PropTypes`}</inlineCode>{`.\nHowever, `}<em parentName=\"p\">{`TypeScript`}</em>{` can perform this extended validation (as described in the next section).`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{}}>{`// App.js\n\nimport { makeRootValidatingTransform } from \"rbx/base/helpers\";\nimport { DEFAULTS } from \"rbx/base/helpers/variables\";\n\nimport { MyAppNavbar } from \"./components\";\nimport \"./App.sass\";\n\nconst COLORS = [ ...DEFAULTS.colors, \"react\" ] as const;\n\nconst themeValue = {\n  transform: makeRootValidatingTransform({ colors: COLORS })\n};\n\nconst App = () => (\n  <ThemeContext.Provider value={themeValue}>\n    {/* supply your children components as you normally would */}\n    <MyAppNavbar />\n    <Button color=\"react\">Hello world</Button>\n  </ThemeContext.Provider>\n);\n`}</code></pre>\n    <p>{`If you're not modifying a `}<em parentName=\"p\">{`Bulma modifier`}</em>{`, but instead are extending a component's `}<strong parentName=\"p\">{`_`}{`DEFAULTS`}</strong>{` (e.g. `}<inlineCode parentName=\"p\">{`BUTTON_DEFAULTS`}</inlineCode>{`), you don't need to explicitly set the `}<inlineCode parentName=\"p\">{`<Theme>`}</inlineCode>{`.`}</p>\n    <p>{`If you're not using `}<em parentName=\"p\">{`TypeScript`}</em>{`, then `}<strong parentName=\"p\">{`you're done`}</strong>{`. Otherwise...`}</p>\n    <h3 {...{\n      \"id\": \"updating-the-typescript-types\"\n    }}>{`Updating the `}<inlineCode parentName=\"h3\">{`TypeScript`}</inlineCode>{` types`}</h3>\n    <p>{`To continue providing type-safety and prop auto-completion with this new configuration, you'll need to add an `}<inlineCode parentName=\"p\">{`rbx.d.ts`}</inlineCode>{` file to your project.\nFor adding a color (as demonstrated above), this file will look like:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// rbx.d.ts\n\nimport \"rbx/base/helpers/variables\";\nimport { VariablesDefaults } from \"rbx/base/helpers/variables\";\n\ndeclare module \"rbx/base/helpers/variables\" {\n  interface VariablesOverrides {\n    colors: VariablesDefaults[\"colors\"] | \"react\"; // we added \\`react\\`!\n  }\n}\n`}</code></pre>\n    <p>{`If you instead modify a component's defaults, and not a `}<em parentName=\"p\">{`Bulma modifier`}</em>{`, simply use the template above, but with the appropriate `}<inlineCode parentName=\"p\">{`<COMPONENT>_DEFAULTS`}</inlineCode>{`.`}</p>\n    <p>{`Now, you'll continue to have auto-complete support, and type-safety while you develop.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}