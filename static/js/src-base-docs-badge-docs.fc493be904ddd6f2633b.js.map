{"version":3,"sources":["/Users/dfee/code/rbx/src/base/__docs__/badge.docs.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dfee_code_rbx_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_3__","__position","__code","__scope","this","Playground","ForwardRefAsExoticComponentDoc","mapEnumerable","OptionBlock","Generic","DEFAULTS","Block","Button","Title","src_base__WEBPACK_IMPORTED_MODULE_5__","as","badge","badgeColor","src_elements__WEBPACK_IMPORTED_MODULE_7__","badgeOutlined","color","outlined","colors","map","i","src_docs_components__WEBPACK_IMPORTED_MODULE_4__","index","key","sizes","badgeSizes","size","name","splice","undefined","_ref2","badgeSize","badgeRounded","component","customize","docPath","docProvider","description","typeName","typeTip","isMDXComponent"],"mappings":"8iBAmBMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAG5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,SADR,SAGAL,OAAAE,EAAA,EAAAF,CAAA,sBAAiBA,OAAAE,EAAA,EAAAF,CAAA,UAAQM,WAAW,KAAnB,SAAjB,2CACAN,OAAAE,EAAA,EAAAF,CAAA,SAAGA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,KAAf,+DAAmFN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,WAAnF,gBACHN,OAAAE,EAAA,EAAAF,CAAA,6BAAwBA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,UAAxB,SAAoFN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,UAApF,2BAAkKN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,WAAlK,KACAN,OAAAE,EAAA,EAAAF,CAACO,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,wFAA+FC,QAAS,CACzIX,MAAOY,KAAOA,KAAKZ,MAAQA,EAC3Ba,eACAC,mCACAC,kBACAC,gBACAC,YACAC,aACAC,UACAC,WACAC,WACChB,QAAQ,cACbJ,OAAAE,EAAA,EAAAF,CAACqB,EAAA,EAAD,CAASC,GAAG,OAAOC,MAAM,UAAUC,WAAW,UAAUpB,QAAQ,WAAhE,kBAIEJ,OAAAE,EAAA,EAAAF,CAAA,sCAAiCA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,OAAjC,oBAAqGN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,YAArG,2BACAN,OAAAE,EAAA,EAAAF,CAACO,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,oGAAyGC,QAAS,CACnJX,MAAOY,KAAOA,KAAKZ,MAAQA,EAC3Ba,eACAC,mCACAC,kBACAC,gBACAC,YACAC,aACAC,UACAC,WACAC,WACChB,QAAQ,cACbJ,OAAAE,EAAA,EAAAF,CAACyB,EAAA,EAAD,CAAQF,MAAO,EAAGC,WAAW,SAASE,eAAa,EAACC,MAAM,SAASC,UAAQ,EAACxB,QAAQ,UAApF,WAIEJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,UADR,UAGAL,OAAAE,EAAA,EAAAF,CAAA,oBAAeA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,cAAf,+BACAN,OAAAE,EAAA,EAAAF,CAACO,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,kPAAmPC,QAAS,CAC7RX,MAAOY,KAAOA,KAAKZ,MAAQA,EAC3Ba,eACAC,mCACAC,kBACAC,gBACAC,YACAC,aACAC,UACAC,WACAC,WACChB,QAAQ,cACZ,kBAAMa,IAASY,OAAOC,IAAI,SAACN,EAAYO,GAAb,OAAmB/B,OAAAE,EAAA,EAAAF,CAACgC,EAAA,EAAD,CAAajC,MAAO,CAC5DyB,cACCS,MAAOF,EAAGG,IAAKH,EAAG3B,QAAQ,eAC3BJ,OAAAE,EAAA,EAAAF,CAACyB,EAAA,EAAD,CAAQF,MAAOC,EAAYA,WAAYA,EAAYpB,QAAQ,UACxDoB,EADH,eAKJxB,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,SADR,SAGAL,OAAAE,EAAA,EAAAF,CAAA,oBAAeA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,aAAf,6BACAN,OAAAE,EAAA,EAAAF,CAACO,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,4XAA+XC,QAAS,CACzaX,MAAOY,KAAOA,KAAKZ,MAAQA,EAC3Ba,eACAC,mCACAC,kBACAC,gBACAC,YACAC,aACAC,UACAC,WACAC,WACChB,QAAQ,cACZ,WACK,IAAM+B,EAAQlB,IAASmB,WAAWN,IAAI,SAAAO,GAAI,MAAK,CAC7CC,KAAMD,EACNA,UAMF,OAJAF,EAAMI,OAAO,EAAG,EAAG,CACjBD,KAAM,SACND,UAAMG,IAEDL,EAAML,IAAI,SAAAW,EAGdV,GAHc,IACfO,EADeG,EACfH,KACAI,EAFeD,EAEfC,UAFe,OAGR1C,OAAAE,EAAA,EAAAF,CAACgC,EAAA,EAAD,CAAajC,MAAO,CAC3B2C,aACCT,MAAOF,EAAGG,IAAKH,EAAG3B,QAAQ,eACjCJ,OAAAE,EAAA,EAAAF,CAACyB,EAAA,EAAD,CAAQF,MAAM,gBAAgBmB,UAAWA,EAAWtC,QAAQ,UACzDkC,EADH,cAMAtC,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,UADR,UAGAL,OAAAE,EAAA,EAAAF,CAAA,oBAAeA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,iBAAf,mCACAN,OAAAE,EAAA,EAAAF,CAACO,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,0RAAiSC,QAAS,CAC3UX,MAAOY,KAAOA,KAAKZ,MAAQA,EAC3Ba,eACAC,mCACAC,kBACAC,gBACAC,YACAC,aACAC,UACAC,WACAC,WACChB,QAAQ,cACbJ,OAAAE,EAAA,EAAAF,CAACyB,EAAA,EAAD,CAAOrB,QAAQ,SACbJ,OAAAE,EAAA,EAAAF,CAACyB,EAAA,EAAD,CAAOH,GAAG,IAAIe,KAAM,EAAGjC,QAAQ,SAA/B,QAGAJ,OAAAE,EAAA,EAAAF,CAACqB,EAAA,EAAD,CAASC,GAAG,OAAOI,eAAa,EAACH,MAAO,GAAInB,QAAQ,WAApD,kBAIFJ,OAAAE,EAAA,EAAAF,CAACyB,EAAA,EAAD,CAAOrB,QAAQ,SACbJ,OAAAE,EAAA,EAAAF,CAACyB,EAAA,EAAD,CAAOH,GAAG,IAAIe,KAAM,EAAGjC,QAAQ,SAA/B,UAGAJ,OAAAE,EAAA,EAAAF,CAACyB,EAAA,EAAD,CAAQC,eAAa,EAACH,MAAO,GAAInB,QAAQ,UAAzC,YAKAJ,OAAAE,EAAA,EAAAF,CAAA,oBAAeA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,gBAAf,2BACAN,OAAAE,EAAA,EAAAF,CAACO,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,oSAA2SC,QAAS,CACrVX,MAAOY,KAAOA,KAAKZ,MAAQA,EAC3Ba,eACAC,mCACAC,kBACAC,gBACAC,YACAC,aACAC,UACAC,WACAC,WACChB,QAAQ,cACbJ,OAAAE,EAAA,EAAAF,CAACyB,EAAA,EAAD,CAAOrB,QAAQ,SACbJ,OAAAE,EAAA,EAAAF,CAACyB,EAAA,EAAD,CAAOH,GAAG,IAAIe,KAAM,EAAGjC,QAAQ,SAA/B,QAGAJ,OAAAE,EAAA,EAAAF,CAACqB,EAAA,EAAD,CAASC,GAAG,OAAOqB,cAAY,EAACpB,MAAO,GAAInB,QAAQ,WAAnD,kBAIFJ,OAAAE,EAAA,EAAAF,CAACyB,EAAA,EAAD,CAAOrB,QAAQ,SACbJ,OAAAE,EAAA,EAAAF,CAACyB,EAAA,EAAD,CAAOH,GAAG,IAAIe,KAAM,EAAGjC,QAAQ,SAA/B,UAGAJ,OAAAE,EAAA,EAAAF,CAACyB,EAAA,EAAD,CAAQH,GAAIH,IAAQwB,cAAY,EAACpB,MAAO,GAAInB,QAAQ,UAApD,YAKAJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,OADR,OAGAL,OAAAE,EAAA,EAAAF,CAAA,gBAAWA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,SAAX,0BAAuFN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,aAAvF,iDAA8LN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,OAA9L,eACAN,OAAAE,EAAA,EAAAF,CAACgC,EAAA,EAAD,CAAgCY,UAAW5B,IAAS6B,WAAS,EAACC,QAAQ,2CAA2CC,YAAY,mBAAmBhD,MAAO,CACrJwB,MAAO,CACLyB,YAAa,4BACbC,SAAU,mBAEZzB,WAAY,CACVwB,YAAa,yBACbC,SAAU,mBACVC,QAASpC,YAAcG,IAASY,SAElCH,cAAe,CACbsB,YAAa,oBACbC,SAAU,WAEZP,UAAW,CACTM,YAAa,wBACbC,SAAU,mBACVC,QAASpC,YAAcG,IAASmB,cAEjChC,QAAQ,0NAIfR,EAAWuD,gBAAiB","file":"static/js/src-base-docs-badge-docs.8fa5ce17.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from \"docz\";\nimport {\n  ForwardRefAsExoticComponentDoc,\n  mapEnumerable,\n  OptionBlock,\n} from \"src/__docs__/components\";\nimport { Generic } from \"src/base\";\nimport { DEFAULTS } from \"src/base/helpers/variables\";\nimport { Block, Button, Title } from \"src/elements\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"badge\"\n    }}>{`Badge`}</h1>\n    <p>{`Display a `}<strong parentName=\"p\">{`badge`}</strong>{` element in front of another component.`}</p>\n    <p><em parentName=\"p\">{`This is available on every component as it's handled by the `}<inlineCode parentName=\"em\">{`Generic`}</inlineCode>{` component.`}</em></p>\n    <p>{`It can display a `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{` or a `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` on any component using `}<inlineCode parentName=\"p\">{`Generic`}</inlineCode>{`.`}</p>\n    <Playground __position={0} __code={'<Generic as=\\\"span\\\" badge=\\\"pending\\\" badgeColor=\\\"warning\\\">\\n  Notifications\\n</Generic>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      ForwardRefAsExoticComponentDoc,\n      mapEnumerable,\n      OptionBlock,\n      Generic,\n      DEFAULTS,\n      Block,\n      Button,\n      Title\n    }} mdxType=\"Playground\">\n  <Generic as=\"span\" badge=\"pending\" badgeColor=\"warning\" mdxType=\"Generic\">\n    Notifications\n  </Generic>\n    </Playground>\n    <p>{`Or, you can use any other `}<inlineCode parentName=\"p\">{`rbx`}</inlineCode>{` component (e.g. `}<inlineCode parentName=\"p\">{`<Button>`}</inlineCode>{`) and use the same API.`}</p>\n    <Playground __position={1} __code={'<Button badge={8} badgeColor=\\\"danger\\\" badgeOutlined color=\\\"danger\\\" outlined>\\n  Button\\n</Button>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      ForwardRefAsExoticComponentDoc,\n      mapEnumerable,\n      OptionBlock,\n      Generic,\n      DEFAULTS,\n      Block,\n      Button,\n      Title\n    }} mdxType=\"Playground\">\n  <Button badge={8} badgeColor=\"danger\" badgeOutlined color=\"danger\" outlined mdxType=\"Button\">\n    Button\n  </Button>\n    </Playground>\n    <h3 {...{\n      \"id\": \"colors\"\n    }}>{`Colors`}</h3>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`badgeColor`}</inlineCode>{` prop to specify the color.`}</p>\n    <Playground __position={2} __code={'() =>\\n  DEFAULTS.colors.map((badgeColor, i) => (\\n    <OptionBlock props={{ badgeColor }} index={i} key={i}>\\n      <Button badge={badgeColor} badgeColor={badgeColor}>\\n        {badgeColor} badge\\n      </Button>\\n    </OptionBlock>\\n  ))'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      ForwardRefAsExoticComponentDoc,\n      mapEnumerable,\n      OptionBlock,\n      Generic,\n      DEFAULTS,\n      Block,\n      Button,\n      Title\n    }} mdxType=\"Playground\">\n  {() => DEFAULTS.colors.map((badgeColor, i) => <OptionBlock props={{\n        badgeColor\n      }} index={i} key={i} mdxType=\"OptionBlock\">\n        <Button badge={badgeColor} badgeColor={badgeColor} mdxType=\"Button\">\n          {badgeColor} badge\n        </Button>\n      </OptionBlock>)}\n    </Playground>\n    <h3 {...{\n      \"id\": \"sizes\"\n    }}>{`Sizes`}</h3>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`badgeSize`}</inlineCode>{` prop to change the size.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const sizes = DEFAULTS.badgeSizes.map(size => ({ name: size, size }))\\n  sizes.splice(1, 0, { name: \\'normal\\', size: undefined })\\n  return sizes.map(({ name, badgeSize }, i) => (\\n    <OptionBlock props={{ badgeSize }} index={i} key={i}>\\n      <Button badge=\\\"notifications\\\" badgeSize={badgeSize}>\\n        {name} size\\n      </Button>\\n    </OptionBlock>\\n  ))\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      ForwardRefAsExoticComponentDoc,\n      mapEnumerable,\n      OptionBlock,\n      Generic,\n      DEFAULTS,\n      Block,\n      Button,\n      Title\n    }} mdxType=\"Playground\">\n  {() => {\n        const sizes = DEFAULTS.badgeSizes.map(size => ({\n          name: size,\n          size\n        }));\n        sizes.splice(1, 0, {\n          name: 'normal',\n          size: undefined\n        });\n        return sizes.map(({\n          name,\n          badgeSize\n        }, i) => <OptionBlock props={{\n          badgeSize\n        }} index={i} key={i} mdxType=\"OptionBlock\">\n    <Button badge='notifications' badgeSize={badgeSize} mdxType=\"Button\">\n      {name} size\n    </Button>\n  </OptionBlock>);\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"styles\"\n    }}>{`Styles`}</h3>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`badgeOutlined`}</inlineCode>{` prop to use an outlined badge.`}</p>\n    <Playground __position={4} __code={'<Block>\\n  <Title as=\\\"p\\\" size={4}>\\n    Span\\n  </Title>\\n  <Generic as=\\\"span\\\" badgeOutlined badge={50}>\\n    Notifications\\n  </Generic>\\n</Block>\\n<Block>\\n  <Title as=\\\"p\\\" size={4}>\\n    Button\\n  </Title>\\n  <Button badgeOutlined badge={50}>\\n    Button\\n  </Button>\\n</Block>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      ForwardRefAsExoticComponentDoc,\n      mapEnumerable,\n      OptionBlock,\n      Generic,\n      DEFAULTS,\n      Block,\n      Button,\n      Title\n    }} mdxType=\"Playground\">\n  <Block mdxType=\"Block\">\n    <Title as=\"p\" size={4} mdxType=\"Title\">\n      Span\n    </Title>\n    <Generic as=\"span\" badgeOutlined badge={50} mdxType=\"Generic\">\n      Notifications\n    </Generic>\n  </Block>\n  <Block mdxType=\"Block\">\n    <Title as=\"p\" size={4} mdxType=\"Title\">\n      Button\n    </Title>\n    <Button badgeOutlined badge={50} mdxType=\"Button\">\n      Button\n    </Button>\n  </Block>\n    </Playground>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`badgeRounded`}</inlineCode>{` prop to round a badge.`}</p>\n    <Playground __position={5} __code={'<Block>\\n  <Title as=\\\"p\\\" size={4}>\\n    Span\\n  </Title>\\n  <Generic as=\\\"span\\\" badgeRounded badge={50}>\\n    Notifications\\n  </Generic>\\n</Block>\\n<Block>\\n  <Title as=\\\"p\\\" size={4}>\\n    Button\\n  </Title>\\n  <Button as={Button} badgeRounded badge={50}>\\n    Button\\n  </Button>\\n</Block>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      ForwardRefAsExoticComponentDoc,\n      mapEnumerable,\n      OptionBlock,\n      Generic,\n      DEFAULTS,\n      Block,\n      Button,\n      Title\n    }} mdxType=\"Playground\">\n  <Block mdxType=\"Block\">\n    <Title as=\"p\" size={4} mdxType=\"Title\">\n      Span\n    </Title>\n    <Generic as=\"span\" badgeRounded badge={50} mdxType=\"Generic\">\n      Notifications\n    </Generic>\n  </Block>\n  <Block mdxType=\"Block\">\n    <Title as=\"p\" size={4} mdxType=\"Title\">\n      Button\n    </Title>\n    <Button as={Button} badgeRounded badge={50} mdxType=\"Button\">\n      Button\n    </Button>\n  </Block>\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`badge`}</inlineCode>{` API is built into the `}<inlineCode parentName=\"p\">{`<Generic>`}</inlineCode>{` component, so these props can be used by any `}<inlineCode parentName=\"p\">{`rbx`}</inlineCode>{` component.`}</p>\n    <ForwardRefAsExoticComponentDoc component={Generic} customize docPath=\"https://wikiki.github.io/elements/badge/\" docProvider=\"Bulma-Extensions\" props={{\n      badge: {\n        description: \"the contents of the badge\",\n        typeName: \"number | string\"\n      },\n      badgeColor: {\n        description: \"the color of the badge\",\n        typeName: \"string (literal)\",\n        typeTip: mapEnumerable(DEFAULTS.colors)\n      },\n      badgeOutlined: {\n        description: \"outline the badge\",\n        typeName: \"boolean\"\n      },\n      badgeSize: {\n        description: \"the size of the badge\",\n        typeName: \"string (literal)\",\n        typeTip: mapEnumerable(DEFAULTS.badgeSizes)\n      }\n    }} mdxType=\"ForwardRefAsExoticComponentDoc\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}