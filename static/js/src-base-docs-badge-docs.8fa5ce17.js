(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"./src/base/__docs__/badge.docs.mdx":function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return l});var t=o("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(o("./node_modules/react/index.js"),o("./node_modules/@mdx-js/react/dist/index.es.js")),i=o("./node_modules/docz/dist/index.esm.js"),c=o("./src/__docs__/components/index.ts"),d=o("./src/base/index.ts"),b=o("./src/base/helpers/variables.ts"),p=o("./src/elements/index.ts"),s={},r="wrapper";function l(e){var n=e.components,o=Object(t.a)(e,["components"]);return Object(a.b)(r,Object.assign({},s,o,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"badge"},"Badge"),Object(a.b)("p",null,"Display a ",Object(a.b)("strong",{parentName:"p"},"badge")," element in front of another component."),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"This is available on every component as it's handled by the ",Object(a.b)("inlineCode",{parentName:"em"},"Generic")," component.")),Object(a.b)("p",null,"It can display a ",Object(a.b)("inlineCode",{parentName:"p"},"number")," or a ",Object(a.b)("inlineCode",{parentName:"p"},"string")," on any component using ",Object(a.b)("inlineCode",{parentName:"p"},"Generic"),"."),Object(a.b)(i.c,{__position:0,__code:'<Generic as="span" badge="pending" badgeColor="warning">\n  Notifications\n</Generic>',__scope:{props:this?this.props:o,Playground:i.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,Generic:d.a,DEFAULTS:b.a,Block:p.a,Button:p.c,Title:p.u},mdxType:"Playground"},Object(a.b)(d.a,{as:"span",badge:"pending",badgeColor:"warning",mdxType:"Generic"},"Notifications")),Object(a.b)("p",null,"Or, you can use any other ",Object(a.b)("inlineCode",{parentName:"p"},"rbx")," component (e.g. ",Object(a.b)("inlineCode",{parentName:"p"},"<Button>"),") and use the same API."),Object(a.b)(i.c,{__position:1,__code:'<Button badge={8} badgeColor="danger" badgeOutlined color="danger" outlined>\n  Button\n</Button>',__scope:{props:this?this.props:o,Playground:i.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,Generic:d.a,DEFAULTS:b.a,Block:p.a,Button:p.c,Title:p.u},mdxType:"Playground"},Object(a.b)(p.c,{badge:8,badgeColor:"danger",badgeOutlined:!0,color:"danger",outlined:!0,mdxType:"Button"},"Button")),Object(a.b)("h3",{id:"colors"},"Colors"),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"badgeColor")," prop to specify the color."),Object(a.b)(i.c,{__position:2,__code:"() =>\n  DEFAULTS.colors.map((badgeColor, i) => (\n    <OptionBlock props={{ badgeColor }} index={i} key={i}>\n      <Button badge={badgeColor} badgeColor={badgeColor}>\n        {badgeColor} badge\n      </Button>\n    </OptionBlock>\n  ))",__scope:{props:this?this.props:o,Playground:i.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,Generic:d.a,DEFAULTS:b.a,Block:p.a,Button:p.c,Title:p.u},mdxType:"Playground"},function(){return b.a.colors.map(function(e,n){return Object(a.b)(c.d,{props:{badgeColor:e},index:n,key:n,mdxType:"OptionBlock"},Object(a.b)(p.c,{badge:e,badgeColor:e,mdxType:"Button"},e," badge"))})}),Object(a.b)("h3",{id:"sizes"},"Sizes"),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"badgeSize")," prop to change the size."),Object(a.b)(i.c,{__position:3,__code:"() => {\n  const sizes = DEFAULTS.badgeSizes.map(size => ({ name: size, size }))\n  sizes.splice(1, 0, { name: 'normal', size: undefined })\n  return sizes.map(({ name, badgeSize }, i) => (\n    <OptionBlock props={{ badgeSize }} index={i} key={i}>\n      <Button badge=\"notifications\" badgeSize={badgeSize}>\n        {name} size\n      </Button>\n    </OptionBlock>\n  ))\n}",__scope:{props:this?this.props:o,Playground:i.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,Generic:d.a,DEFAULTS:b.a,Block:p.a,Button:p.c,Title:p.u},mdxType:"Playground"},function(){var e=b.a.badgeSizes.map(function(e){return{name:e,size:e}});return e.splice(1,0,{name:"normal",size:void 0}),e.map(function(e,n){var o=e.name,t=e.badgeSize;return Object(a.b)(c.d,{props:{badgeSize:t},index:n,key:n,mdxType:"OptionBlock"},Object(a.b)(p.c,{badge:"notifications",badgeSize:t,mdxType:"Button"},o," size"))})}),Object(a.b)("h3",{id:"styles"},"Styles"),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"badgeOutlined")," prop to use an outlined badge."),Object(a.b)(i.c,{__position:4,__code:'<Block>\n  <Title as="p" size={4}>\n    Span\n  </Title>\n  <Generic as="span" badgeOutlined badge={50}>\n    Notifications\n  </Generic>\n</Block>\n<Block>\n  <Title as="p" size={4}>\n    Button\n  </Title>\n  <Button badgeOutlined badge={50}>\n    Button\n  </Button>\n</Block>',__scope:{props:this?this.props:o,Playground:i.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,Generic:d.a,DEFAULTS:b.a,Block:p.a,Button:p.c,Title:p.u},mdxType:"Playground"},Object(a.b)(p.a,{mdxType:"Block"},Object(a.b)(p.u,{as:"p",size:4,mdxType:"Title"},"Span"),Object(a.b)(d.a,{as:"span",badgeOutlined:!0,badge:50,mdxType:"Generic"},"Notifications")),Object(a.b)(p.a,{mdxType:"Block"},Object(a.b)(p.u,{as:"p",size:4,mdxType:"Title"},"Button"),Object(a.b)(p.c,{badgeOutlined:!0,badge:50,mdxType:"Button"},"Button"))),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"badgeRounded")," prop to round a badge."),Object(a.b)(i.c,{__position:5,__code:'<Block>\n  <Title as="p" size={4}>\n    Span\n  </Title>\n  <Generic as="span" badgeRounded badge={50}>\n    Notifications\n  </Generic>\n</Block>\n<Block>\n  <Title as="p" size={4}>\n    Button\n  </Title>\n  <Button as={Button} badgeRounded badge={50}>\n    Button\n  </Button>\n</Block>',__scope:{props:this?this.props:o,Playground:i.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,Generic:d.a,DEFAULTS:b.a,Block:p.a,Button:p.c,Title:p.u},mdxType:"Playground"},Object(a.b)(p.a,{mdxType:"Block"},Object(a.b)(p.u,{as:"p",size:4,mdxType:"Title"},"Span"),Object(a.b)(d.a,{as:"span",badgeRounded:!0,badge:50,mdxType:"Generic"},"Notifications")),Object(a.b)(p.a,{mdxType:"Block"},Object(a.b)(p.u,{as:"p",size:4,mdxType:"Title"},"Button"),Object(a.b)(p.c,{as:p.c,badgeRounded:!0,badge:50,mdxType:"Button"},"Button"))),Object(a.b)("h2",{id:"api"},"API"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"badge")," API is built into the ",Object(a.b)("inlineCode",{parentName:"p"},"<Generic>")," component, so these props can be used by any ",Object(a.b)("inlineCode",{parentName:"p"},"rbx")," component."),Object(a.b)(c.b,{component:d.a,customize:!0,docPath:"https://wikiki.github.io/elements/badge/",docProvider:"Bulma-Extensions",props:{badge:{description:"the contents of the badge",typeName:"number | string"},badgeColor:{description:"the color of the badge",typeName:"string (literal)",typeTip:Object(c.g)(b.a.colors)},badgeOutlined:{description:"outline the badge",typeName:"boolean"},badgeSize:{description:"the size of the badge",typeName:"string (literal)",typeTip:Object(c.g)(b.a.badgeSizes)}},mdxType:"ForwardRefAsExoticComponentDoc"}))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/base/__docs__/badge.docs.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=src-base-docs-badge-docs.fc493be904ddd6f2633b.js.map