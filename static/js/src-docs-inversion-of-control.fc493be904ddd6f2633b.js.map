{"version":3,"sources":["/Users/dfee/code/rbx/src/__docs__/inversion-of-control.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_dfee_code_rbx_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","isMDXComponent"],"mappings":"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","file":"static/js/src-docs-inversion-of-control.22b8c82e.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"inversion-of-control\"\n    }}>{`Inversion of Control`}</h1>\n    <p>{`In a nutshell, pretty much every component renders through the `}<inlineCode parentName=\"p\">{`<Generic>`}</inlineCode>{` component.\nThis means that those components take advantage of all the `}<a parentName=\"p\" {...{\n        \"href\": \"https://bulma.io/documentation/modifiers/\"\n      }}>{`Bulma modifiers`}</a>{`, `}<strong parentName=\"p\">{`by taking any prop that `}<a parentName=\"strong\" {...{\n          \"href\": \"/base/generic\"\n        }}><inlineCode parentName=\"a\">{`<Generic>`}</inlineCode></a>{` accepts`}</strong>{`.`}</p>\n    <p>{`These components, created with `}<inlineCode parentName=\"p\">{`forwardRefAs`}</inlineCode>{` – a sort of wrapper on React's `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/forwarding-refs.html\"\n      }}><inlineCode parentName=\"a\">{`forwardRef`}</inlineCode></a>{` - can render themselves as `}<strong parentName=\"p\">{`any other component`}</strong>{`, hence the `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Inversion_of_control\"\n      }}>{`inversion of control`}</a>{` paradigm.`}</p>\n    <h2 {...{\n      \"id\": \"the-as-prop\"\n    }}>{`The `}<inlineCode parentName=\"h2\">{`as`}</inlineCode>{` prop`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop is what enables `}<em parentName=\"p\">{`inversion of control`}</em>{` (IOC).\nYou can pass any prop that the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` component or JSX Element supports.`}</p>\n    <p>{`For example, if you're using the `}<inlineCode parentName=\"p\">{`<Button>`}</inlineCode>{` component, and want to render it as an `}<em parentName=\"p\">{`HTML anchor`}</em>{`, you can supply `}<inlineCode parentName=\"p\">{`as=\"a\"`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`<Button>`}</inlineCode>{` component will then `}<em parentName=\"p\">{`also`}</em>{` accept the `}<inlineCode parentName=\"p\">{`href`}</inlineCode>{` prop and any other props that an `}<em parentName=\"p\">{`HTML anchor`}</em>{` accepts. It will no longer accept the props that an `}<em parentName=\"p\">{`HTML button`}</em>{` accepts, however (like the `}<inlineCode parentName=\"p\">{`form`}</inlineCode>{` prop).`}</p>\n    <p>{`You can also use the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop to supply your components or other third-party components (that take the standard `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` prop!).`}</p>\n    <p>{`For example, if you're using `}<a parentName=\"p\" {...{\n        \"href\": \"https://reacttraining.com/react-router/\"\n      }}>{`React Router`}</a>{`, you can pass its `}<inlineCode parentName=\"p\">{`<Link>`}</inlineCode>{` component to `}<inlineCode parentName=\"p\">{`<Button>`}</inlineCode>{`, and use it's props:`}</p>\n    <p><inlineCode parentName=\"p\">{`<Button as={Link} to=\"/somewhere\">Go somewhere</Button>`}</inlineCode></p>\n    <p>{`All components have a default `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop value, and that is called out in each component's `}<em parentName=\"p\">{`API Docs`}</em>{`, both in a `}<em parentName=\"p\">{`tag`}</em>{` and in the `}<em parentName=\"p\">{`props table`}</em>{`.`}</p>\n    <p>{`As an added bonus, `}<em parentName=\"p\">{`TypeScript`}</em>{` will `}<em parentName=\"p\">{`also`}</em>{` typecheck the props of the component or JSX Element that you've provided to the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop!`}</p>\n    <h2 {...{\n      \"id\": \"ref-forwarding\"\n    }}>{`Ref forwarding`}</h2>\n    <p>{`It can be frustrating when your refs get lost.\nThat is, you want to control or access an underlying HTML element, but you can't access it, because you don't have access to it.`}</p>\n    <p>{`All user-components support `}<em parentName=\"p\">{`ref forwarding`}</em>{`, so you can pass a React `}<inlineCode parentName=\"p\">{`Ref`}</inlineCode>{` (a function that has the shape `}<inlineCode parentName=\"p\">{`(target: HTMLElement) => void`}</inlineCode>{` or a `}<inlineCode parentName=\"p\">{`RefObject`}</inlineCode>{` as created by `}<inlineCode parentName=\"p\">{`React.createRef()`}</inlineCode>{`) – and then you'll have access t the underlying component or element.`}</p>\n    <p>{`This is especially useful when working with forms!`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}