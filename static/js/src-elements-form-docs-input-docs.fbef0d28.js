(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{"./src/elements/form/__docs__/input.docs.mdx":function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return h});var t=o("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=(o("./node_modules/react/index.js"),o("./node_modules/@mdx-js/react/dist/index.es.js")),l=o("./node_modules/@fortawesome/free-solid-svg-icons/index.es.js"),a=o("./node_modules/@fortawesome/react-fontawesome/index.es.js"),p=o("./node_modules/docz/dist/index.esm.js"),c=o("./src/__docs__/components/index.ts"),b=o("./src/base/helpers/variables.ts"),d=o("./src/elements/index.ts"),r=o("./src/elements/form/control.tsx"),s=o("./src/elements/form/field.tsx"),m=o("./src/elements/form/label.tsx"),y=o("./src/elements/form/input.tsx"),u={},O="wrapper";function h(e){var n=e.components,o=Object(t.a)(e,["components"]);return Object(i.b)(O,Object.assign({},u,o,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"input"},"Input"),Object(i.b)("p",null,"The text ",Object(i.b)("strong",{parentName:"p"},"input")," and its variations."),Object(i.b)(p.c,{__position:0,__code:'<Input type="text" placeholder="Text input" />',__scope:{props:this?this.props:o,faCheck:l.k,faEnvelope:l.n,faLock:l.y,FontAwesomeIcon:a.a,Playground:p.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,DEFAULTS:b.a,Icon:d.m,Control:r.b,Field:s.b,Label:m.b,Input:y.b,INPUT_DEFAULTS:y.a},mdxType:"Playground"},Object(i.b)(y.b,{type:"text",placeholder:"Text input",mdxType:"Input"})),Object(i.b)("h3",{id:"colors"},"Colors"),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"color")," prop to change the ",Object(i.b)("inlineCode",{parentName:"p"},"<Input>"),"'s color."),Object(i.b)(p.c,{__position:1,__code:'() =>\n  DEFAULTS.colors.map((color, i) => (\n    <OptionBlock props={{ color }} index={i} key={i}>\n      <Field>\n        <Control>\n          <Input type="text" color={color} placeholder={`${color} input`} />\n        </Control>\n      </Field>\n    </OptionBlock>\n  ))',__scope:{props:this?this.props:o,faCheck:l.k,faEnvelope:l.n,faLock:l.y,FontAwesomeIcon:a.a,Playground:p.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,DEFAULTS:b.a,Icon:d.m,Control:r.b,Field:s.b,Label:m.b,Input:y.b,INPUT_DEFAULTS:y.a},mdxType:"Playground"},function(){return b.a.colors.map(function(e,n){return Object(i.b)(c.d,{props:{color:e},index:n,key:n,mdxType:"OptionBlock"},Object(i.b)(s.b,{mdxType:"Field"},Object(i.b)(r.b,{mdxType:"Control"},Object(i.b)(y.b,{type:"text",color:e,placeholder:"".concat(e," input"),mdxType:"Input"}))))})}),Object(i.b)("h3",{id:"sizes"},"Sizes"),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"size")," prop to change the ",Object(i.b)("inlineCode",{parentName:"p"},"<Input>"),"'s size."),Object(i.b)(p.c,{__position:2,__code:"() => {\n  const sizes = INPUT_DEFAULTS.sizes.map(size => ({ name: size, size }))\n  sizes.splice(1, 0, { name: 'normal', size: undefined })\n  return sizes.map(({ name, size }, i) => (\n    <OptionBlock props={{ size }} index={i} key={i}>\n      <Field>\n        <Control>\n          <Input type=\"text\" size={size} placeholder={`${name} input`} />\n        </Control>\n      </Field>\n    </OptionBlock>\n  ))\n}",__scope:{props:this?this.props:o,faCheck:l.k,faEnvelope:l.n,faLock:l.y,FontAwesomeIcon:a.a,Playground:p.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,DEFAULTS:b.a,Icon:d.m,Control:r.b,Field:s.b,Label:m.b,Input:y.b,INPUT_DEFAULTS:y.a},mdxType:"Playground"},function(){var e=y.a.sizes.map(function(e){return{name:e,size:e}});return e.splice(1,0,{name:"normal",size:void 0}),e.map(function(e,n){var o=e.name,t=e.size;return Object(i.b)(c.d,{props:{size:t},index:n,key:n,mdxType:"OptionBlock"},Object(i.b)(s.b,{mdxType:"Field"},Object(i.b)(r.b,{mdxType:"Control"},Object(i.b)(y.b,{type:"text",size:t,placeholder:"".concat(o," input"),mdxType:"Input"}))))})}),Object(i.b)("h3",{id:"styles"},"Styles"),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"rounded")," prop to round the edges of the ",Object(i.b)("inlineCode",{parentName:"p"},"<Input>"),"."),Object(i.b)(p.c,{__position:3,__code:'<Input type="text" rounded placeholder="rounded input" />',__scope:{props:this?this.props:o,faCheck:l.k,faEnvelope:l.n,faLock:l.y,FontAwesomeIcon:a.a,Playground:p.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,DEFAULTS:b.a,Icon:d.m,Control:r.b,Field:s.b,Label:m.b,Input:y.b,INPUT_DEFAULTS:y.a},mdxType:"Playground"},Object(i.b)(y.b,{type:"text",rounded:!0,placeholder:"rounded input",mdxType:"Input"})),Object(i.b)("h3",{id:"states"},"States"),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"state")," prop to change the ",Object(i.b)("inlineCode",{parentName:"p"},"<Input>"),"'s state."),Object(i.b)(p.c,{__position:4,__code:"() => {\n  const states = INPUT_DEFAULTS.states.map(state => ({ name: state, state }))\n  states.splice(0, 0, { name: 'normal', size: undefined })\n  return states.map(({ name, state }, i) => (\n    <OptionBlock props={{ state }} index={i} key={i}>\n      <Field>\n        <Control>\n          <Input type=\"text\" state={state} placeholder={`${name} input`} />\n        </Control>\n      </Field>\n    </OptionBlock>\n  ))\n}",__scope:{props:this?this.props:o,faCheck:l.k,faEnvelope:l.n,faLock:l.y,FontAwesomeIcon:a.a,Playground:p.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,DEFAULTS:b.a,Icon:d.m,Control:r.b,Field:s.b,Label:m.b,Input:y.b,INPUT_DEFAULTS:y.a},mdxType:"Playground"},function(){var e=y.a.states.map(function(e){return{name:e,state:e}});return e.splice(0,0,{name:"normal",size:void 0}),e.map(function(e,n){var o=e.name,t=e.state;return Object(i.b)(c.d,{props:{state:t},index:n,key:n,mdxType:"OptionBlock"},Object(i.b)(s.b,{mdxType:"Field"},Object(i.b)(r.b,{mdxType:"Control"},Object(i.b)(y.b,{type:"text",state:t,placeholder:"".concat(o," input"),mdxType:"Input"}))))})}),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"loading")," prop on the ",Object(i.b)("inlineCode",{parentName:"p"},"<Control>")," that contains the ",Object(i.b)("inlineCode",{parentName:"p"},"<Input>")," to get a loading spinner.\nIt's size can be adjusted by passing an appropriate ",Object(i.b)("inlineCode",{parentName:"p"},"size")," prop to the ",Object(i.b)("inlineCode",{parentName:"p"},"<Control>")," and ",Object(i.b)("inlineCode",{parentName:"p"},"<Input>"),"."),Object(i.b)(p.c,{__position:5,__code:'<Field>\n  <Control size="small" loading>\n    <Input type="text" size="small" placeholder="small loading input" />\n  </Control>\n</Field>\n<Field>\n  <Control loading>\n    <Input type="text" placeholder="normal loading input" />\n  </Control>\n</Field>\n<Field>\n  <Control size="medium" loading>\n    <Input type="text" size="medium" placeholder="medium loading input" />\n  </Control>\n</Field>\n<Field>\n  <Control size="large" loading>\n    <Input type="text" size="large" placeholder="large loading input" />\n  </Control>\n</Field>',__scope:{props:this?this.props:o,faCheck:l.k,faEnvelope:l.n,faLock:l.y,FontAwesomeIcon:a.a,Playground:p.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,DEFAULTS:b.a,Icon:d.m,Control:r.b,Field:s.b,Label:m.b,Input:y.b,INPUT_DEFAULTS:y.a},mdxType:"Playground"},Object(i.b)(s.b,{mdxType:"Field"},Object(i.b)(r.b,{size:"small",loading:!0,mdxType:"Control"},Object(i.b)(y.b,{type:"text",size:"small",placeholder:"small loading input",mdxType:"Input"}))),Object(i.b)(s.b,{mdxType:"Field"},Object(i.b)(r.b,{loading:!0,mdxType:"Control"},Object(i.b)(y.b,{type:"text",placeholder:"normal loading input",mdxType:"Input"}))),Object(i.b)(s.b,{mdxType:"Field"},Object(i.b)(r.b,{size:"medium",loading:!0,mdxType:"Control"},Object(i.b)(y.b,{type:"text",size:"medium",placeholder:"medium loading input",mdxType:"Input"}))),Object(i.b)(s.b,{mdxType:"Field"},Object(i.b)(r.b,{size:"large",loading:!0,mdxType:"Control"},Object(i.b)(y.b,{type:"text",size:"large",placeholder:"large loading input",mdxType:"Input"})))),Object(i.b)("h3",{id:"disabled"},"Disabled"),Object(i.b)("p",null,"Use the standard ",Object(i.b)("inlineCode",{parentName:"p"},"disabled")," prop on the ",Object(i.b)("inlineCode",{parentName:"p"},"<Input>")," to disable it."),Object(i.b)(p.c,{__position:6,__code:'<Control>\n  <Input type="text" placeholder="Disabled" disabled />\n</Control>',__scope:{props:this?this.props:o,faCheck:l.k,faEnvelope:l.n,faLock:l.y,FontAwesomeIcon:a.a,Playground:p.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,DEFAULTS:b.a,Icon:d.m,Control:r.b,Field:s.b,Label:m.b,Input:y.b,INPUT_DEFAULTS:y.a},mdxType:"Playground"},Object(i.b)(r.b,{mdxType:"Control"},Object(i.b)(y.b,{type:"text",placeholder:"Disabled",disabled:!0,mdxType:"Input"}))),Object(i.b)("h3",{id:"read-only"},"Read-only"),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"readOnly")," prop to mark an ",Object(i.b)("inlineCode",{parentName:"p"},"<Input>")," as read-only.\nIt's not editable, and has no shadow."),Object(i.b)(p.c,{__position:7,__code:'<Control>\n  <Input type="text" placeholder="This text is read-only" readOnly />\n</Control>',__scope:{props:this?this.props:o,faCheck:l.k,faEnvelope:l.n,faLock:l.y,FontAwesomeIcon:a.a,Playground:p.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,DEFAULTS:b.a,Icon:d.m,Control:r.b,Field:s.b,Label:m.b,Input:y.b,INPUT_DEFAULTS:y.a},mdxType:"Playground"},Object(i.b)(r.b,{mdxType:"Control"},Object(i.b)(y.b,{type:"text",placeholder:"This text is read-only",readOnly:!0,mdxType:"Input"}))),Object(i.b)("h3",{id:"static"},"Static"),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"static")," prop along with ",Object(i.b)("inlineCode",{parentName:"p"},"readOnly")," to mark an ",Object(i.b)("inlineCode",{parentName:"p"},"<Input>")," to remove the background, border, shadow and horizontal padding.\nThe vertical spacing will be maintained, so you can align the input in any context \u2013\xa0like a horizontal form."),Object(i.b)(p.c,{__position:8,__code:'<Field horizontal>\n  <Field.Label size="normal">\n    <Label>From</Label>\n  </Field.Label>\n  <Field.Body>\n    <Control>\n      <Input type="email" value="me@example.com" readOnly static />\n    </Control>\n  </Field.Body>\n</Field>\n<Field horizontal>\n  <Field.Label>\n    <Label>To</Label>\n  </Field.Label>\n  <Field.Body>\n    <Control>\n      <Input type="email" placeholder="Recipient email" />\n    </Control>\n  </Field.Body>\n</Field>',__scope:{props:this?this.props:o,faCheck:l.k,faEnvelope:l.n,faLock:l.y,FontAwesomeIcon:a.a,Playground:p.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,DEFAULTS:b.a,Icon:d.m,Control:r.b,Field:s.b,Label:m.b,Input:y.b,INPUT_DEFAULTS:y.a},mdxType:"Playground"},Object(i.b)(s.b,{horizontal:!0,mdxType:"Field"},Object(i.b)(s.b.Label,{size:"normal"},Object(i.b)(m.b,{mdxType:"Label"},"From")),Object(i.b)(s.b.Body,null,Object(i.b)(r.b,{mdxType:"Control"},Object(i.b)(y.b,{type:"email",value:"me@example.com",readOnly:!0,static:!0,mdxType:"Input"})))),Object(i.b)(s.b,{horizontal:!0,mdxType:"Field"},Object(i.b)(s.b.Label,null,Object(i.b)(m.b,{mdxType:"Label"},"To")),Object(i.b)(s.b.Body,null,Object(i.b)(r.b,{mdxType:"Control"},Object(i.b)(y.b,{type:"email",placeholder:"Recipient email",mdxType:"Input"}))))),Object(i.b)("h3",{id:"with-icons"},"With icons"),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"iconLeft")," or ",Object(i.b)("inlineCode",{parentName:"p"},"iconRight")," prop on the ",Object(i.b)("inlineCode",{parentName:"p"},"<Control>")," that contains an ",Object(i.b)("inlineCode",{parentName:"p"},"<Input>")," to add icons.\nYou'll also need to use the ",Object(i.b)("inlineCode",{parentName:"p"},"align")," property on the ",Object(i.b)("inlineCode",{parentName:"p"},"<Icon>"),"."),Object(i.b)(p.c,{__position:9,__code:'<Field>\n  <Control iconLeft iconRight>\n    <Input type="email" placeholder="Email" />\n    <Icon align="left">\n      <FontAwesomeIcon icon={faEnvelope} />\n    </Icon>\n    <Icon align="right">\n      <FontAwesomeIcon icon={faCheck} />\n    </Icon>\n  </Control>\n</Field>\n<Field>\n  <Control iconLeft>\n    <Input type="password" placeholder="Password" />\n    <Icon align="left">\n      <FontAwesomeIcon icon={faLock} />\n    </Icon>\n  </Control>\n</Field>',__scope:{props:this?this.props:o,faCheck:l.k,faEnvelope:l.n,faLock:l.y,FontAwesomeIcon:a.a,Playground:p.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,DEFAULTS:b.a,Icon:d.m,Control:r.b,Field:s.b,Label:m.b,Input:y.b,INPUT_DEFAULTS:y.a},mdxType:"Playground"},Object(i.b)(s.b,{mdxType:"Field"},Object(i.b)(r.b,{iconLeft:!0,iconRight:!0,mdxType:"Control"},Object(i.b)(y.b,{type:"email",placeholder:"Email",mdxType:"Input"}),Object(i.b)(d.m,{align:"left",mdxType:"Icon"},Object(i.b)(a.a,{icon:l.n,mdxType:"FontAwesomeIcon"})),Object(i.b)(d.m,{align:"right",mdxType:"Icon"},Object(i.b)(a.a,{icon:l.k,mdxType:"FontAwesomeIcon"})))),Object(i.b)(s.b,{mdxType:"Field"},Object(i.b)(r.b,{iconLeft:!0,mdxType:"Control"},Object(i.b)(y.b,{type:"password",placeholder:"Password",mdxType:"Input"}),Object(i.b)(d.m,{align:"left",mdxType:"Icon"},Object(i.b)(a.a,{icon:l.y,mdxType:"FontAwesomeIcon"}))))),Object(i.b)("p",null,"If the control contains an icon, it will remain ",Object(i.b)("strong",{parentName:"p"},"centered")," regardless of the size foo the ",Object(i.b)("inlineCode",{parentName:"p"},"<Input>")," or ",Object(i.b)("inlineCode",{parentName:"p"},"<Icon>"),"."),Object(i.b)(p.c,{__position:10,__code:'<Field>\n  <Control iconLeft iconRight>\n    <Input type="email" size="small" placeholder="Email" />\n    <Icon align="left" size="small">\n      <FontAwesomeIcon icon={faEnvelope} />\n    </Icon>\n    <Icon align="right" size="small">\n      <FontAwesomeIcon icon={faCheck} />\n    </Icon>\n  </Control>\n</Field>\n<Field>\n  <Control iconLeft iconRight>\n    <Input type="email" placeholder="Email" />\n    <Icon align="left">\n      <FontAwesomeIcon icon={faEnvelope} />\n    </Icon>\n    <Icon align="right">\n      <FontAwesomeIcon icon={faCheck} />\n    </Icon>\n  </Control>\n</Field>\n<Field>\n  <Control iconLeft iconRight>\n    <Input type="email" size="medium" placeholder="Email" />\n    <Icon align="left">\n      <FontAwesomeIcon icon={faEnvelope} />\n    </Icon>\n    <Icon align="right">\n      <FontAwesomeIcon icon={faCheck} />\n    </Icon>\n  </Control>\n</Field>\n<Field>\n  <Control iconLeft iconRight>\n    <Input type="email" size="large" placeholder="Email" />\n    <Icon align="left" size="medium">\n      <FontAwesomeIcon icon={faEnvelope} />\n    </Icon>\n    <Icon align="right" size="medium">\n      <FontAwesomeIcon icon={faCheck} />\n    </Icon>\n  </Control>\n</Field>',__scope:{props:this?this.props:o,faCheck:l.k,faEnvelope:l.n,faLock:l.y,FontAwesomeIcon:a.a,Playground:p.c,ForwardRefAsExoticComponentDoc:c.b,mapEnumerable:c.g,OptionBlock:c.d,DEFAULTS:b.a,Icon:d.m,Control:r.b,Field:s.b,Label:m.b,Input:y.b,INPUT_DEFAULTS:y.a},mdxType:"Playground"},Object(i.b)(s.b,{mdxType:"Field"},Object(i.b)(r.b,{iconLeft:!0,iconRight:!0,mdxType:"Control"},Object(i.b)(y.b,{type:"email",size:"small",placeholder:"Email",mdxType:"Input"}),Object(i.b)(d.m,{align:"left",size:"small",mdxType:"Icon"},Object(i.b)(a.a,{icon:l.n,mdxType:"FontAwesomeIcon"})),Object(i.b)(d.m,{align:"right",size:"small",mdxType:"Icon"},Object(i.b)(a.a,{icon:l.k,mdxType:"FontAwesomeIcon"})))),Object(i.b)(s.b,{mdxType:"Field"},Object(i.b)(r.b,{iconLeft:!0,iconRight:!0,mdxType:"Control"},Object(i.b)(y.b,{type:"email",placeholder:"Email",mdxType:"Input"}),Object(i.b)(d.m,{align:"left",mdxType:"Icon"},Object(i.b)(a.a,{icon:l.n,mdxType:"FontAwesomeIcon"})),Object(i.b)(d.m,{align:"right",mdxType:"Icon"},Object(i.b)(a.a,{icon:l.k,mdxType:"FontAwesomeIcon"})))),Object(i.b)(s.b,{mdxType:"Field"},Object(i.b)(r.b,{iconLeft:!0,iconRight:!0,mdxType:"Control"},Object(i.b)(y.b,{type:"email",size:"medium",placeholder:"Email",mdxType:"Input"}),Object(i.b)(d.m,{align:"left",mdxType:"Icon"},Object(i.b)(a.a,{icon:l.n,mdxType:"FontAwesomeIcon"})),Object(i.b)(d.m,{align:"right",mdxType:"Icon"},Object(i.b)(a.a,{icon:l.k,mdxType:"FontAwesomeIcon"})))),Object(i.b)(s.b,{mdxType:"Field"},Object(i.b)(r.b,{iconLeft:!0,iconRight:!0,mdxType:"Control"},Object(i.b)(y.b,{type:"email",size:"large",placeholder:"Email",mdxType:"Input"}),Object(i.b)(d.m,{align:"left",size:"medium",mdxType:"Icon"},Object(i.b)(a.a,{icon:l.n,mdxType:"FontAwesomeIcon"})),Object(i.b)(d.m,{align:"right",size:"medium",mdxType:"Icon"},Object(i.b)(a.a,{icon:l.k,mdxType:"FontAwesomeIcon"}))))),Object(i.b)("h2",{id:"api"},"API"),Object(i.b)(c.b,{component:y.b,customize:!0,docPath:"/form/input",props:{color:{description:"change the input's color",typeName:"string (literal)",typeTip:Object(c.g)(b.a.colors)},readOnly:{description:"make the input read-only",typeName:"boolean"},rounded:{description:"round the edges of the input",typeName:"boolean"},size:{description:"change the input's size",typeName:"string (literal)",typeTip:Object(c.g)(y.a.sizes)},state:{description:"change the input's state",typeName:"string (literal)",typeTip:Object(c.g)(y.a.states)},static:{description:"remove the background, border, shadow and horizontal padding",typeName:"boolean"},type:{description:"set the input's type",typeName:"string (literal)",typeTip:Object(c.g)(y.a.types)}},mdxType:"ForwardRefAsExoticComponentDoc"}))}h&&h===Object(h)&&Object.isExtensible(h)&&Object.defineProperty(h,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/elements/form/__docs__/input.docs.mdx"}}),h.isMDXComponent=!0}}]);
//# sourceMappingURL=src-elements-form-docs-input-docs.fc493be904ddd6f2633b.js.map