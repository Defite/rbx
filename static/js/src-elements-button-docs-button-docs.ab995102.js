(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{"./src/elements/button/__docs__/button.docs.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return B});var o=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"),a=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),c=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),i=t("./node_modules/@fortawesome/free-brands-svg-icons/index.es.js"),b=t("./node_modules/@fortawesome/free-solid-svg-icons/index.es.js"),s=t("./node_modules/@fortawesome/react-fontawesome/index.es.js"),l=t("./node_modules/docz/dist/index.esm.js"),u=t("./src/__docs__/components/index.ts"),p=t("./src/base/helpers/variables.ts"),r=t("./src/elements/index.ts"),d=t("./src/elements/button/button.tsx"),m=t("./src/elements/button/button-group.tsx"),f={},T="wrapper";function B(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(c.b)(T,Object.assign({},f,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"button"},"Button"),Object(c.b)("p",null,"The classic button, in different colors, sizes, and states."),Object(c.b)(l.c,{__position:0,__code:'<Button.Group>\n  <Button>Button</Button>\n  <Button as="a">Anchor</Button>\n</Button.Group>',__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,Object(c.b)(d.b,{mdxType:"Button"},"Button"),Object(c.b)(d.b,{as:"a",mdxType:"Button"},"Anchor"))),Object(c.b)("h3",{id:"colors"},"Colors"),Object(c.b)("p",null,"These are the colors you can specify using the ",Object(c.b)("inlineCode",{parentName:"p"},"color")," prop."),Object(c.b)("p",null,"When unspecified, Bulma styles a neutral button."),Object(c.b)(l.c,{__position:1,__code:"<Button.Group>\n  {DEFAULTS.colors.map(color => (\n    <Button color={color} key={color}>\n      {color}\n    </Button>\n  ))}\n</Button.Group>",__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,p.a.colors.map(function(e){return Object(c.b)(d.b,{color:e,key:e,mdxType:"Button"},e)}))),Object(c.b)("h3",{id:"sizes"},"Sizes"),Object(c.b)("p",null,"These are the sizes you can specify using the ",Object(c.b)("inlineCode",{parentName:"p"},"size")," prop."),Object(c.b)("p",null,"When unspecified, Bulma styles a ",Object(c.b)("inlineCode",{parentName:"p"},"medium")," button."),Object(c.b)(l.c,{__position:2,__code:"<Button.Group>\n  {BUTTON_DEFAULTS.sizes.map(size => (\n    <Button size={size} key={size}>\n      {size}\n    </Button>\n  ))}\n</Button.Group>",__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,d.a.sizes.map(function(e){return Object(c.b)(d.b,{size:e,key:e,mdxType:"Button"},e)}))),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"size")," prop on ",Object(c.b)("inlineCode",{parentName:"p"},"<Button.Group>")," to change the size of ",Object(c.b)("strong",{parentName:"p"},"multiple buttons")," at once."),Object(c.b)(l.c,{__position:3,__code:'<Button.Group size="medium">\n  <Button>All</Button>\n  <Button>Medium</Button>\n  <Button>Size</Button>\n</Button.Group>',__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,{size:"medium"},Object(c.b)(d.b,{mdxType:"Button"},"All"),Object(c.b)(d.b,{mdxType:"Button"},"Medium"),Object(c.b)(d.b,{mdxType:"Button"},"Size"))),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"size")," prop on ",Object(c.b)("inlineCode",{parentName:"p"},"<Button>")," to change the size of a ",Object(c.b)("strong",{parentName:"p"},"subset of buttons")," in a ",Object(c.b)("inlineCode",{parentName:"p"},"<Button.Group>")," with a set ",Object(c.b)("inlineCode",{parentName:"p"},"size")," prop."),Object(c.b)(l.c,{__position:4,__code:'<Button.Group size="small">\n  <Button>small</Button>\n  <Button>small</Button>\n  <Button>small</Button>\n  <Button size="normal">normal</Button>\n  <Button>small</Button>\n</Button.Group>',__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,{size:"small"},Object(c.b)(d.b,{mdxType:"Button"},"small"),Object(c.b)(d.b,{mdxType:"Button"},"small"),Object(c.b)(d.b,{mdxType:"Button"},"small"),Object(c.b)(d.b,{size:"normal",mdxType:"Button"},"normal"),Object(c.b)(d.b,{mdxType:"Button"},"small"))),Object(c.b)("h3",{id:"displays"},"Displays"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"fullwidth")," prop to make a button fullwidth."),Object(c.b)(l.c,{__position:5,__code:"<Button.Group>\n  {BUTTON_DEFAULTS.sizes.map(size => (\n    <Button fullwidth size={size} key={size}>\n      {size}\n    </Button>\n  ))}\n</Button.Group>",__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,d.a.sizes.map(function(e){return Object(c.b)(d.b,{fullwidth:!0,size:e,key:e,mdxType:"Button"},e)}))),Object(c.b)("h3",{id:"outlined"},"Outlined"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"outlined")," prop to outline a button."),Object(c.b)(l.c,{__position:6,__code:"<Button.Group>\n  {DEFAULTS.colors.map(color => (\n    <Button outlined color={color} key={color}>\n      Outlined\n    </Button>\n  ))}\n</Button.Group>",__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,p.a.colors.map(function(e){return Object(c.b)(d.b,{outlined:!0,color:e,key:e,mdxType:"Button"},"Outlined")}))),Object(c.b)("h3",{id:"inverted"},"Inverted"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"inverted")," prop to invert a button."),Object(c.b)(l.c,{__position:7,__code:"<Button.Group>\n  {DEFAULTS.colors.map(color => (\n    <Button inverted color={color} key={color}>\n      Inverted\n    </Button>\n  ))}\n</Button.Group>",__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},className:"has-background-primary",mdxType:"Playground"},Object(c.b)(d.b.Group,null,p.a.colors.map(function(e){return Object(c.b)(d.b,{inverted:!0,color:e,key:e,mdxType:"Button"},"Inverted")}))),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"outlined")," and ",Object(c.b)("inlineCode",{parentName:"p"},"inverted")," props together to outline and invert a button."),Object(c.b)(l.c,{__position:8,__code:"<Button.Group>\n  {DEFAULTS.colors.map(color => (\n    <Button inverted outlined color={color} key={color}>\n      Invert Outlined\n    </Button>\n  ))}\n</Button.Group>",__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},className:"has-background-primary",mdxType:"Playground"},Object(c.b)(d.b.Group,null,p.a.colors.map(function(e){return Object(c.b)(d.b,{inverted:!0,outlined:!0,color:e,key:e,mdxType:"Button"},"Invert Outlined")}))),Object(c.b)("h3",{id:"rounded"},"Rounded"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"rounded")," prop to round a button's edges."),Object(c.b)(l.c,{__position:9,__code:"<Button.Group>\n  {DEFAULTS.colors.map(color => (\n    <Button rounded color={color} key={color}>\n      Rounded\n    </Button>\n  ))}\n</Button.Group>",__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,p.a.colors.map(function(e){return Object(c.b)(d.b,{rounded:!0,color:e,key:e,mdxType:"Button"},"Rounded")}))),Object(c.b)("h3",{id:"hovered"},"Hovered"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"hovered")," value for the ",Object(c.b)("inlineCode",{parentName:"p"},"state")," prop to force hovered buttons."),Object(c.b)(l.c,{__position:10,__code:'<Button.Group>\n  {DEFAULTS.colors.map(color => (\n    <Button state="hovered" color={color} key={color}>\n      Hovered\n    </Button>\n  ))}\n</Button.Group>',__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,p.a.colors.map(function(e){return Object(c.b)(d.b,{state:"hovered",color:e,key:e,mdxType:"Button"},"Hovered")}))),Object(c.b)("h4",{id:"focused"},"Focused"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"focused")," value for the ",Object(c.b)("inlineCode",{parentName:"p"},"state")," prop to force focused buttons."),Object(c.b)(l.c,{__position:11,__code:'<Button.Group>\n  {DEFAULTS.colors.map(color => (\n    <Button state="focused" color={color} key={color}>\n      Focused\n    </Button>\n  ))}\n</Button.Group>',__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,p.a.colors.map(function(e){return Object(c.b)(d.b,{state:"focused",color:e,key:e,mdxType:"Button"},"Focused")}))),Object(c.b)("h3",{id:"active"},"Active"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"active")," value for the ",Object(c.b)("inlineCode",{parentName:"p"},"state")," prop to force active buttons."),Object(c.b)(l.c,{__position:12,__code:'<Button.Group>\n  {DEFAULTS.colors.map(color => (\n    <Button state="active" color={color} key={color}>\n      Active\n    </Button>\n  ))}\n</Button.Group>',__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,p.a.colors.map(function(e){return Object(c.b)(d.b,{state:"active",color:e,key:e,mdxType:"Button"},"Active")}))),Object(c.b)("h3",{id:"loading"},"Loading"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"loading")," value for the ",Object(c.b)("inlineCode",{parentName:"p"},"state")," prop produces to get loading buttons."),Object(c.b)(l.c,{__position:13,__code:'<Button.Group>\n  {DEFAULTS.colors.map(color => (\n    <Button state="loading" color={color} key={color}>\n      Loading\n    </Button>\n  ))}\n</Button.Group>',__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,p.a.colors.map(function(e){return Object(c.b)(d.b,{state:"loading",color:e,key:e,mdxType:"Button"},"Loading")}))),Object(c.b)("h3",{id:"static"},"Static"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"static")," prop to make a button non-interactive."),Object(c.b)(l.c,{__position:14,__code:"<Button static>Static</Button>",__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b,{static:!0,mdxType:"Button"},"Static")),Object(c.b)("h3",{id:"disabled"},"Disabled"),Object(c.b)("p",null,"Use the HTML standard ",Object(c.b)("inlineCode",{parentName:"p"},"disabled")," prop to disable a button."),Object(c.b)(l.c,{__position:15,__code:"<Button.Group>\n  {DEFAULTS.colors.map(color => (\n    <Button disabled color={color} key={color}>\n      Disabled\n    </Button>\n  ))}\n</Button.Group>",__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,p.a.colors.map(function(e){return Object(c.b)(d.b,{disabled:!0,color:e,key:e,mdxType:"Button"},"Disabled")}))),Object(c.b)("h3",{id:"with-font-awesome-icons"},"With Font Awesome icons"),Object(c.b)(l.c,{__position:16,__code:'<Button.Group>\n  <Button>\n    <Icon size="small">\n      <FontAwesomeIcon icon={faBold} />\n    </Icon>\n  </Button>\n  <Button>\n    <Icon size="small">\n      <FontAwesomeIcon icon={faItalic} />\n    </Icon>\n  </Button>\n  <Button>\n    <Icon size="small">\n      <FontAwesomeIcon icon={faUnderline} />\n    </Icon>\n  </Button>\n</Button.Group>\n<Button.Group>\n  <Button>\n    <Icon>\n      <FontAwesomeIcon icon={faGithub} />\n    </Icon>\n    <span>GitHub</span>\n  </Button>\n  <Button>\n    <Icon>\n      <FontAwesomeIcon icon={faTwitter} />\n    </Icon>\n    <span>Twitter</span>\n  </Button>\n\n  <Button color="success">\n    <Icon size="small">\n      <FontAwesomeIcon icon={faCheck} />\n    </Icon>\n    <span>Save</span>\n  </Button>\n\n  <Button color="danger" outlined>\n    <span>Delete</span>\n    <Icon size="small">\n      <FontAwesomeIcon icon={faTimes} />\n    </Icon>\n  </Button>\n</Button.Group>\n<Button.Group>\n  {BUTTON_DEFAULTS.sizes.map((size, i) => (\n    <Button size={size} key={i}>\n      <Icon>\n        <FontAwesomeIcon icon={faGithub} />\n      </Icon>\n      <span>GitHub</span>\n    </Button>\n  ))}\n</Button.Group>',__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,Object(c.b)(d.b,{mdxType:"Button"},Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.i,mdxType:"FontAwesomeIcon"}))),Object(c.b)(d.b,{mdxType:"Button"},Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.x,mdxType:"FontAwesomeIcon"}))),Object(c.b)(d.b,{mdxType:"Button"},Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.G,mdxType:"FontAwesomeIcon"})))),Object(c.b)(d.b.Group,null,Object(c.b)(d.b,{mdxType:"Button"},Object(c.b)(r.m,{mdxType:"Icon"},Object(c.b)(s.a,{icon:i.a,mdxType:"FontAwesomeIcon"})),Object(c.b)("span",null,"GitHub")),Object(c.b)(d.b,{mdxType:"Button"},Object(c.b)(r.m,{mdxType:"Icon"},Object(c.b)(s.a,{icon:i.b,mdxType:"FontAwesomeIcon"})),Object(c.b)("span",null,"Twitter")),Object(c.b)(d.b,{color:"success",mdxType:"Button"},Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.k,mdxType:"FontAwesomeIcon"})),Object(c.b)("span",null,"Save")),Object(c.b)(d.b,{color:"danger",outlined:!0,mdxType:"Button"},Object(c.b)("span",null,"Delete"),Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.F,mdxType:"FontAwesomeIcon"})))),Object(c.b)(d.b.Group,null,d.a.sizes.map(function(e,n){return Object(c.b)(d.b,{size:e,key:n,mdxType:"Button"},Object(c.b)(r.m,{mdxType:"Icon"},Object(c.b)(s.a,{icon:i.a,mdxType:"FontAwesomeIcon"})),Object(c.b)("span",null,"GitHub"))}))),Object(c.b)("p",null,"If the button only contains an icon, it will always remain ",Object(c.b)("em",{parentName:"p"},"square"),"."),Object(c.b)(l.c,{__position:17,__code:'<Button.Group>\n  <Button size="small">\n    <Icon size="small">\n      <FontAwesomeIcon icon={faHeading} />\n    </Icon>\n  </Button>\n</Button.Group>\n<Button.Group>\n  <Button>\n    <Icon size="small">\n      <FontAwesomeIcon icon={faHeading} />\n    </Icon>\n  </Button>\n  <Button>\n    <Icon>\n      <FontAwesomeIcon icon={faHeading} size="lg" />\n    </Icon>\n  </Button>\n</Button.Group>\n<Button.Group>\n  <Button size="medium">\n    <Icon size="small">\n      <FontAwesomeIcon icon={faHeading} />\n    </Icon>\n  </Button>\n  <Button size="medium">\n    <Icon>\n      <FontAwesomeIcon icon={faHeading} size="lg" />\n    </Icon>\n  </Button>\n\n  <Button size="medium">\n    <Icon size="medium">\n      <FontAwesomeIcon icon={faHeading} size="2x" />\n    </Icon>\n  </Button>\n</Button.Group>\n<Button.Group>\n  <Button size="large">\n    <Icon size="small">\n      <FontAwesomeIcon icon={faHeading} />\n    </Icon>\n  </Button>\n  <Button size="large">\n    <Icon>\n      <FontAwesomeIcon icon={faHeading} size="lg" />\n    </Icon>\n  </Button>\n\n  <Button size="large">\n    <Icon size="medium">\n      <FontAwesomeIcon icon={faHeading} size="2x" />\n    </Icon>\n  </Button>\n</Button.Group>',__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,Object(c.b)(d.b,{size:"small",mdxType:"Button"},Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.s,mdxType:"FontAwesomeIcon"})))),Object(c.b)(d.b.Group,null,Object(c.b)(d.b,{mdxType:"Button"},Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.s,mdxType:"FontAwesomeIcon"}))),Object(c.b)(d.b,{mdxType:"Button"},Object(c.b)(r.m,{mdxType:"Icon"},Object(c.b)(s.a,{icon:b.s,size:"lg",mdxType:"FontAwesomeIcon"})))),Object(c.b)(d.b.Group,null,Object(c.b)(d.b,{size:"medium",mdxType:"Button"},Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.s,mdxType:"FontAwesomeIcon"}))),Object(c.b)(d.b,{size:"medium",mdxType:"Button"},Object(c.b)(r.m,{mdxType:"Icon"},Object(c.b)(s.a,{icon:b.s,size:"lg",mdxType:"FontAwesomeIcon"}))),Object(c.b)(d.b,{size:"medium",mdxType:"Button"},Object(c.b)(r.m,{size:"medium",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.s,size:"2x",mdxType:"FontAwesomeIcon"})))),Object(c.b)(d.b.Group,null,Object(c.b)(d.b,{size:"large",mdxType:"Button"},Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.s,mdxType:"FontAwesomeIcon"}))),Object(c.b)(d.b,{size:"large",mdxType:"Button"},Object(c.b)(r.m,{mdxType:"Icon"},Object(c.b)(s.a,{icon:b.s,size:"lg",mdxType:"FontAwesomeIcon"}))),Object(c.b)(d.b,{size:"large",mdxType:"Button"},Object(c.b)(r.m,{size:"medium",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.s,size:"2x",mdxType:"FontAwesomeIcon"}))))),Object(c.b)("h3",{id:"groups"},"Groups"),Object(c.b)("p",null,"Group buttons together on a single line using the ",Object(c.b)("inlineCode",{parentName:"p"},"<Button.Group>")," component."),Object(c.b)(l.c,{__position:18,__code:'<Button.Group>\n  <Button color="link">Save Changes</Button>\n  <Button>Cancel</Button>\n  <Button color="danger">Delete post</Button>\n</Button.Group>',__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,Object(c.b)(d.b,{color:"link",mdxType:"Button"},"Save Changes"),Object(c.b)(d.b,{mdxType:"Button"},"Cancel"),Object(c.b)(d.b,{color:"danger",mdxType:"Button"},"Delete post"))),Object(c.b)("p",null,"A long list of buttons will be wrapped while keeping the buttons evenly spaced."),Object(c.b)(l.c,{__position:19,__code:"<Button.Group>\n  {[\n    'One',\n    'Two',\n    'Three',\n    'Four',\n    'Five',\n    'Six',\n    'Seven',\n    'Eight',\n    'Nine',\n    'Ten',\n    'Eleven',\n    'Twelve',\n    'Thirteen',\n    'Fourteen',\n    'Fifteen',\n    'Sixteen',\n    'Seventeen',\n    'Eighteen',\n    'Nineteen',\n    'Twenty',\n  ].map(name => (\n    <Button key={name}>{name}</Button>\n  ))}\n</Button.Group>",__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,null,["One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen","Twenty"].map(function(e){return Object(c.b)(d.b,{key:e,mdxType:"Button"},e)}))),Object(c.b)("h3",{id:"addons"},"Addons"),Object(c.b)("p",null,"You can use the ",Object(c.b)("inlineCode",{parentName:"p"},"hasAddons")," prop to attach buttons together."),Object(c.b)(l.c,{__position:20,__code:'<Button.Group hasAddons>\n  <Button>\n    <Icon size="small">\n      <FontAwesomeIcon icon={faBold} />\n    </Icon>\n    <span>Bold</span>\n  </Button>\n  <Button>\n    <Icon size="small">\n      <FontAwesomeIcon icon={faItalic} />\n    </Icon>\n    <span>Italic</span>\n  </Button>\n  <Button>\n    <Icon size="small">\n      <FontAwesomeIcon icon={faUnderline} />\n    </Icon>\n    <span>Underline</span>\n  </Button>\n</Button.Group>\n<Button.Group hasAddons>\n  <Button>\n    <Icon size="small">\n      <FontAwesomeIcon icon={faAlignLeft} />\n    </Icon>\n    <span>Left</span>\n  </Button>\n  <Button>\n    <Icon size="small">\n      <FontAwesomeIcon icon={faAlignCenter} />\n    </Icon>\n    <span>Center</span>\n  </Button>\n  <Button>\n    <Icon size="small">\n      <FontAwesomeIcon icon={faAlignRight} />\n    </Icon>\n    <span>Right</span>\n  </Button>\n</Button.Group>',__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,{hasAddons:!0},Object(c.b)(d.b,{mdxType:"Button"},Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.i,mdxType:"FontAwesomeIcon"})),Object(c.b)("span",null,"Bold")),Object(c.b)(d.b,{mdxType:"Button"},Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.x,mdxType:"FontAwesomeIcon"})),Object(c.b)("span",null,"Italic")),Object(c.b)(d.b,{mdxType:"Button"},Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.G,mdxType:"FontAwesomeIcon"})),Object(c.b)("span",null,"Underline"))),Object(c.b)(d.b.Group,{hasAddons:!0},Object(c.b)(d.b,{mdxType:"Button"},Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.b,mdxType:"FontAwesomeIcon"})),Object(c.b)("span",null,"Left")),Object(c.b)(d.b,{mdxType:"Button"},Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.a,mdxType:"FontAwesomeIcon"})),Object(c.b)("span",null,"Center")),Object(c.b)(d.b,{mdxType:"Button"},Object(c.b)(r.m,{size:"small",mdxType:"Icon"},Object(c.b)(s.a,{icon:b.c,mdxType:"FontAwesomeIcon"})),Object(c.b)("span",null,"Right")))),Object(c.b)("h3",{id:"alignment"},"Alignment"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"align")," prop to align a button group."),Object(c.b)(l.c,{__position:21,__code:"() =>\n  [undefined, ...BUTTON_GROUP_DEFAULTS.alignments].map((align, i) => (\n    <OptionBlock props={{ align }} index={i} key={i}>\n      <Button.Group hasAddons align={align}>\n        <Button>Yes</Button>\n        <Button>Maybe</Button>\n        <Button>No</Button>\n      </Button.Group>\n    </OptionBlock>\n  ))",__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},function(){return[void 0].concat(Object(o.a)(m.a.alignments)).map(function(e,n){return Object(c.b)(u.d,{props:{align:e},index:n,key:n,mdxType:"OptionBlock"},Object(c.b)(d.b.Group,{hasAddons:!0,align:e},Object(c.b)(d.b,{mdxType:"Button"},"Yes"),Object(c.b)(d.b,{mdxType:"Button"},"Maybe"),Object(c.b)(d.b,{mdxType:"Button"},"No")))})}),Object(c.b)("h3",{id:"customization"},"Customization"),Object(c.b)("p",null,"Individual buttons can be tailored with different styles.\nYou should use the ",Object(c.b)("inlineCode",{parentName:"p"},"selected")," prop of the button to ensure it's ",Object(c.b)("em",{parentName:"p"},"above")," it's siblings."),Object(c.b)(l.c,{__position:22,__code:'<Button.Group hasAddons>\n  <Button color="success" selected>\n    Yes\n  </Button>\n  <Button>Maybe</Button>\n  <Button>No</Button>\n</Button.Group>\n<Button.Group hasAddons>\n  <Button>Yes</Button>\n  <Button color="info" selected>\n    Maybe\n  </Button>\n  <Button>No</Button>\n</Button.Group>\n<Button.Group hasAddons>\n  <Button>Yes</Button>\n  <Button>Maybe</Button>\n  <Button color="danger">No</Button>\n</Button.Group>',__scope:{props:this?this.props:t,faGithub:i.a,faTwitter:i.b,faAlignCenter:b.a,faAlignLeft:b.b,faAlignRight:b.c,faBold:b.i,faCheck:b.k,faHeading:b.s,faItalic:b.x,faTimes:b.F,faUnderline:b.G,FontAwesomeIcon:s.a,Playground:l.c,ForwardRefAsExoticComponentDoc:u.b,mapEnumerable:u.g,OptionBlock:u.d,DEFAULTS:p.a,Icon:r.m,Button:d.b,BUTTON_DEFAULTS:d.a,BUTTON_GROUP_DEFAULTS:m.a},mdxType:"Playground"},Object(c.b)(d.b.Group,{hasAddons:!0},Object(c.b)(d.b,{color:"success",selected:!0,mdxType:"Button"},"Yes"),Object(c.b)(d.b,{mdxType:"Button"},"Maybe"),Object(c.b)(d.b,{mdxType:"Button"},"No")),Object(c.b)(d.b.Group,{hasAddons:!0},Object(c.b)(d.b,{mdxType:"Button"},"Yes"),Object(c.b)(d.b,{color:"info",selected:!0,mdxType:"Button"},"Maybe"),Object(c.b)(d.b,{mdxType:"Button"},"No")),Object(c.b)(d.b.Group,{hasAddons:!0},Object(c.b)(d.b,{mdxType:"Button"},"Yes"),Object(c.b)(d.b,{mdxType:"Button"},"Maybe"),Object(c.b)(d.b,{color:"danger",mdxType:"Button"},"No"))),Object(c.b)("h2",{id:"api"},"API"),Object(c.b)(u.b,{component:d.b,customize:!0,docPath:"/elements/button",props:{color:{description:"the color of the button",typeName:"string (literal)",typeTip:Object(u.g)(p.a.colors)},fullwidth:{description:"whether the button occupies all horizontal space",typeName:"boolean"},inverted:{description:"whether the button is inverted",typeName:"boolean"},outlined:{description:"whether the button is outlined",typeName:"boolean"},rounded:{description:"whether the button is rounded",typeName:"boolean"},selected:{description:"whether the button is selected",typeName:"boolean"},size:{description:"the size of the button",typeName:"string (literal)",typeTip:Object(u.g)(d.a.sizes)},state:{description:"the state of the button",typeName:"string (literal)",typeTip:Object(u.g)(d.a.states)},static:{description:"whether the button responds to input",typeName:"boolean"},text:{description:"whether the button looks like text",typeName:"boolean"}},mdxType:"ForwardRefAsExoticComponentDoc"}),Object(c.b)(u.b,{component:d.b.Group,customize:!0,docPath:"/elements/button",props:{align:{description:"the alignment of the button group",typeName:"string (literal)",typeTip:Object(u.g)(m.a.alignments)},hasAddons:{description:"whether the button group allows addons",typeName:"boolean"},size:{description:"set the size of children buttons",typeName:"string (literal)",typeTip:Object(u.g)(m.a.sizes)}},mdxType:"ForwardRefAsExoticComponentDoc"}))}B&&B===Object(B)&&Object.isExtensible(B)&&Object.defineProperty(B,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/elements/button/__docs__/button.docs.mdx"}}),B.isMDXComponent=!0}}]);
//# sourceMappingURL=src-elements-button-docs-button-docs.fc493be904ddd6f2633b.js.map