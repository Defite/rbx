(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{"./src/__docs__/customize.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return i});var a=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),o=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),r={},p="wrapper";function i(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)(p,Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"customize-rbx"},"Customize rbx"),Object(o.b)("p",null,"Sometimes the default ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://bulma.io"}),"Bulma")," styles aren't enough.\nThat's a feature and not a bug, and the Bulma docs are quick to demonstrate ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://bulma.io/documentation/customize/"}),"how to customize the SASS")," to your liking."),Object(o.b)("h2",{id:"modifying-sass-variables"},"Modifying SASS variables"),Object(o.b)("p",null,"If you're modifying SASS values without introducing anything new, you don't have to keep reading. If you are ",Object(o.b)("strong",{parentName:"p"},"adding")," or ",Object(o.b)("strong",{parentName:"p"},"removing")," variables (or ",Object(o.b)("strong",{parentName:"p"},"adding")," to or ",Object(o.b)("strong",{parentName:"p"},"removing")," from SASS arrays), the following docs ",Object(o.b)("em",{parentName:"p"},"are")," relevant."),Object(o.b)("p",null,"There are many places in ",Object(o.b)("strong",{parentName:"p"},"rbx")," that leverage these variable overrides: the global modifier helpers (located at ",Object(o.b)("inlineCode",{parentName:"p"},"/base/helpers"),") as well as components like ",Object(o.b)("inlineCode",{parentName:"p"},"<Button>")," (and more than 20 others)."),Object(o.b)("h2",{id:"overview"},"Overview"),Object(o.b)("p",null,"Before we get on to an example, here's an overview of how we use ",Object(o.b)("em",{parentName:"p"},"TypeScript")," to customize what props are supported."),Object(o.b)("p",null,"Take a look at the ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/dfee/rbx/blob/master/src/base/helpers/variables.ts"}),"source code for the ",Object(o.b)("strong",{parentName:"a"},"helpers variables")),", or the ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/dfee/rbx/blob/master/src/elements/button/button.tsx"}),"source code for ",Object(o.b)("inlineCode",{parentName:"a"},"<Button>")),", and you'll notice two very important expressions:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"the ",Object(o.b)("inlineCode",{parentName:"li"},"DEFAULTS")," or ",Object(o.b)("inlineCode",{parentName:"li"},"<COMPONENT>_DEFAULTS")," variable that defines the defaults in a ",Object(o.b)("inlineCode",{parentName:"li"},"const")),Object(o.b)("li",{parentName:"ol"},"a ",Object(o.b)("inlineCode",{parentName:"li"},"Variables")," or ",Object(o.b)("inlineCode",{parentName:"li"},"<Component>Variables")," ",Object(o.b)("inlineCode",{parentName:"li"},"type")," that uses those defaults to construct a ",Object(o.b)("em",{parentName:"li"},"TypeScript")," type.")),Object(o.b)("p",null,"Looking deeper at the ",Object(o.b)("strong",{parentName:"p"},"DEFAULTS"),", that's where the ",Object(o.b)("em",{parentName:"p"},"Bulma")," defaults are defined in code.\nFor example, ",Object(o.b)("inlineCode",{parentName:"p"},"colors")," on ",Object(o.b)("inlineCode",{parentName:"p"},"DEFAULTS"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"sizes")," on ",Object(o.b)("inlineCode",{parentName:"p"},"BUTTON_DEFAULTS"),"."),Object(o.b)("p",null,"Looking deeper at the ",Object(o.b)("strong",{parentName:"p"},"Variables"),", you'll realize that ",Object(o.b)("inlineCode",{parentName:"p"},"Variables")," is actually just a merge of ",Object(o.b)("inlineCode",{parentName:"p"},"VariablesDefaults")," and ",Object(o.b)("inlineCode",{parentName:"p"},"VariablesOverrides"),"."),Object(o.b)("p",null,"Below we'll talk more about how to override these."),Object(o.b)("h2",{id:"an-example-introducing-a-new-color"},"An example: introducing a new color"),Object(o.b)("p",null,"To add the color ",Object(o.b)("inlineCode",{parentName:"p"},'"react"')," (the React logo-color) so that all components can use it (across props like ",Object(o.b)("inlineCode",{parentName:"p"},"textColor")," and ",Object(o.b)("inlineCode",{parentName:"p"},"backgroundColor")," as well as with component-specific props like ",Object(o.b)("inlineCode",{parentName:"p"},"color")," on ",Object(o.b)("inlineCode",{parentName:"p"},"<Button>"),"), you'll need to extend the ",Object(o.b)("inlineCode",{parentName:"p"},"$colors")," variable before import Bulma's SASS."),Object(o.b)("p",null,"Your new SASS file (imported somewhere in your App) will look something like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{}),'# App.sass\n\n@charset \'utf-8\';\n\n@import "~bulma/sass/utilities/functions"\n\n// add new colors\n$react: #00d8ff !default\n$react-invert: findColorInvert($react) !default\n$custom-colors: ("react": ($react, $react-invert))\n\n// Import Bulma styles\n@import "~bulma/bulma"\n\n// Import rbx style fixes (**very simple**)\n@import "~rbx/rbx"\n')),Object(o.b)("h3",{id:"update-the-theme"},"Update the ",Object(o.b)("inlineCode",{parentName:"h3"},"<Theme>")),Object(o.b)("p",null,"If you've altered a ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://bulma.io/documentation/modifiers/"}),"Bulma modifier"),", you'll need to update the ",Object(o.b)("inlineCode",{parentName:"p"},"<Theme>")," at the root of your App, so that ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://www.npmjs.com/package/prop-types"}),"PropTypes")," uses the proper values for prop type-checking."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://www.npmjs.com/package/prop-types"}),Object(o.b)("em",{parentName:"a"},"PropTypes"))," only provides literal type-checks on the global helpers \u2013\xa0those located in ",Object(o.b)("inlineCode",{parentName:"p"},"base/helpers"),". I.e. ",Object(o.b)("em",{parentName:"p"},"PropTypes")," will check that your new ",Object(o.b)("inlineCode",{parentName:"p"},'"react"')," color is in fact a ",Object(o.b)("inlineCode",{parentName:"p"},"textColor"),", but it will ",Object(o.b)("em",{parentName:"p"},"not")," check that ",Object(o.b)("inlineCode",{parentName:"p"},'"react"')," is a valid ",Object(o.b)("inlineCode",{parentName:"p"},"color")," for ",Object(o.b)("inlineCode",{parentName:"p"},"<Button>"),", due to limitations on ",Object(o.b)("inlineCode",{parentName:"p"},"PropTypes"),".\nHowever, ",Object(o.b)("em",{parentName:"p"},"TypeScript")," can perform this extended validation (as described in the next section).")),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{}),'// App.js\n\nimport { makeRootValidatingTransform } from "rbx/base/helpers";\nimport { DEFAULTS } from "rbx/base/helpers/variables";\n\nimport { MyAppNavbar } from "./components";\nimport "./App.sass";\n\nconst COLORS = [ ...DEFAULTS.colors, "react" ] as const;\n\nconst themeValue = {\n  transform: makeRootValidatingTransform({ colors: COLORS })\n};\n\nconst App = () => (\n  <ThemeContext.Provider value={themeValue}>\n    {/* supply your children components as you normally would */}\n    <MyAppNavbar />\n    <Button color="react">Hello world</Button>\n  </ThemeContext.Provider>\n);\n')),Object(o.b)("p",null,"If you're not modifying a ",Object(o.b)("em",{parentName:"p"},"Bulma modifier"),", but instead are extending a component's ",Object(o.b)("strong",{parentName:"p"},"_","DEFAULTS")," (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"BUTTON_DEFAULTS"),"), you don't need to explicitly set the ",Object(o.b)("inlineCode",{parentName:"p"},"<Theme>"),"."),Object(o.b)("p",null,"If you're not using ",Object(o.b)("em",{parentName:"p"},"TypeScript"),", then ",Object(o.b)("strong",{parentName:"p"},"you're done"),". Otherwise..."),Object(o.b)("h3",{id:"updating-the-typescript-types"},"Updating the ",Object(o.b)("inlineCode",{parentName:"h3"},"TypeScript")," types"),Object(o.b)("p",null,"To continue providing type-safety and prop auto-completion with this new configuration, you'll need to add an ",Object(o.b)("inlineCode",{parentName:"p"},"rbx.d.ts")," file to your project.\nFor adding a color (as demonstrated above), this file will look like:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{}),'// rbx.d.ts\n\nimport "rbx/base/helpers/variables";\nimport { VariablesDefaults } from "rbx/base/helpers/variables";\n\ndeclare module "rbx/base/helpers/variables" {\n  interface VariablesOverrides {\n    colors: VariablesDefaults["colors"] | "react"; // we added `react`!\n  }\n}\n')),Object(o.b)("p",null,"If you instead modify a component's defaults, and not a ",Object(o.b)("em",{parentName:"p"},"Bulma modifier"),", simply use the template above, but with the appropriate ",Object(o.b)("inlineCode",{parentName:"p"},"<COMPONENT>_DEFAULTS"),"."),Object(o.b)("p",null,"Now, you'll continue to have auto-complete support, and type-safety while you develop."))}i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/__docs__/customize.mdx"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=src-docs-customize.fc493be904ddd6f2633b.js.map